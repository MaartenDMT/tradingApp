2023-09-25 21:10:19 - model - INFO - Starting loading the models
2023-09-25 21:10:19 - model - INFO - loading the Main view model
2023-09-25 21:10:19 - model - INFO - loading the Trade tab model
2023-09-25 21:10:19 - model - INFO - loading the Exchange tab model
2023-09-25 21:10:19 - model - INFO - loading the Bot tab model
2023-09-25 21:10:19 - model - INFO - loading the Chart tab model
2023-09-25 21:10:19 - model - INFO - Finished loading the models
2023-09-25 21:10:31 - model - INFO - machine learning model Logistic Regression selected
2023-09-25 21:10:33 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    NaN
920    NaN
921    NaN
922    NaN
923    NaN
Name: label, Length: 924, dtype: float64
2023-09-25 21:11:38 - model - INFO - RandomizedSearchCV(cv=5, estimator=LogisticRegression(),
                   param_distributions={'C': [0.1, 1.0, 10.0],
                                        'max_iter': [1000, 1500, 2000],
                                        'penalty': ['l2'],
                                        'solver': ['newton-cg', 'lbfgs',
                                                   'liblinear', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:11:38 - model - INFO - the custom: parallelize search best params are {'solver': 'sag', 'penalty': 'l2', 'max_iter': 2000, 'C': 0.1}
2023-09-25 21:11:38 - model - INFO - the custom: parallelize search best score is 0.554
2023-09-25 21:11:38 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=LogisticRegression(),
                   param_distributions={'C': [0.1, 1.0, 10.0],
                                        'max_iter': [1000, 1500, 2000],
                                        'penalty': ['l2'],
                                        'solver': ['newton-cg', 'lbfgs',
                                                   'liblinear', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:11:38 - model - INFO - Accuracy: 0.5027027027027027
2023-09-25 21:11:38 - model - INFO - Classification Report:
              precision    recall  f1-score   support

           0       0.47      0.47      0.47        87
           1       0.00      0.00      0.00         1
           2       0.53      0.54      0.53        97

    accuracy                           0.50       185
   macro avg       0.33      0.34      0.33       185
weighted avg       0.50      0.50      0.50       185

2023-09-25 21:11:38 - model - INFO - The Logistic Regression model has been trained, evaluated 0.5027027027027027, and saved.
2023-09-25 21:14:45 - model - INFO - machine learning model MLPClassifier selected
2023-09-25 21:14:45 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    NaN
920    NaN
921    NaN
922    NaN
923    NaN
Name: label, Length: 924, dtype: float64
2023-09-25 21:14:52 - model - ERROR - Exception occurred during model search: Not all points are within the bounds of the space.
2023-09-25 21:17:59 - model - INFO - Starting loading the models
2023-09-25 21:17:59 - model - INFO - loading the Main view model
2023-09-25 21:17:59 - model - INFO - loading the Trade tab model
2023-09-25 21:17:59 - model - INFO - loading the Exchange tab model
2023-09-25 21:17:59 - model - INFO - loading the Bot tab model
2023-09-25 21:17:59 - model - INFO - loading the Chart tab model
2023-09-25 21:17:59 - model - INFO - Finished loading the models
2023-09-25 21:18:16 - model - INFO - machine learning model Decision Tree Classifier selected
2023-09-25 21:18:16 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 21:19:14 - model - INFO - BayesSearchCV(cv=5, estimator=DecisionTreeClassifier(),
              scoring=make_scorer(<lambda>),
              search_spaces={'criterion': ['gini', 'entropy'],
                             'max_depth': [3, 5, 10],
                             'min_samples_leaf': [1, 2, 3, 4, 5],
                             'min_samples_split': [2, 5, 10]})
2023-09-25 21:19:14 - model - INFO - the custom: parallelize search best params are OrderedDict([('criterion', 'entropy'), ('max_depth', 10), ('min_samples_leaf', 4), ('min_samples_split', 5)])
2023-09-25 21:19:14 - model - INFO - the custom: parallelize search best score is 0.6300000000000001
2023-09-25 21:19:14 - model - INFO - the custom: parallelize search best estimator is BayesSearchCV(cv=5, estimator=DecisionTreeClassifier(),
              scoring=make_scorer(<lambda>),
              search_spaces={'criterion': ['gini', 'entropy'],
                             'max_depth': [3, 5, 10],
                             'min_samples_leaf': [1, 2, 3, 4, 5],
                             'min_samples_split': [2, 5, 10]})
2023-09-25 21:19:14 - model - INFO - Accuracy: 0.5891891891891892
2023-09-25 21:19:14 - model - INFO - Classification Report:
              precision    recall  f1-score   support

           0       0.61      0.61      0.61        97
           1       0.00      0.00      0.00         0
           2       0.57      0.57      0.57        88

    accuracy                           0.59       185
   macro avg       0.39      0.39      0.39       185
weighted avg       0.59      0.59      0.59       185

2023-09-25 21:19:14 - model - INFO - The Decision Tree Classifier model has been trained, evaluated 0.5891891891891892, and saved.
2023-09-25 21:25:07 - model - INFO - Starting loading the models
2023-09-25 21:25:07 - model - INFO - loading the Main view model
2023-09-25 21:25:07 - model - INFO - loading the Trade tab model
2023-09-25 21:25:07 - model - INFO - loading the Exchange tab model
2023-09-25 21:25:07 - model - INFO - loading the Bot tab model
2023-09-25 21:25:07 - model - INFO - loading the Chart tab model
2023-09-25 21:25:07 - model - INFO - Finished loading the models
2023-09-25 21:25:30 - model - INFO - machine learning model Linear Regression selected
2023-09-25 21:26:05 - model - INFO - RandomizedSearchCV(cv=5, estimator=LinearRegression(),
                   param_distributions={'copy_X': [True, False],
                                        'fit_intercept': [True, False],
                                        'n_jobs': [-1, 1]},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:26:05 - model - INFO - the custom: parallelize search best params are {'n_jobs': -1, 'fit_intercept': True, 'copy_X': True}
2023-09-25 21:26:05 - model - INFO - the custom: parallelize search best score is 344.7594
2023-09-25 21:26:05 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=LinearRegression(),
                   param_distributions={'copy_X': [True, False],
                                        'fit_intercept': [True, False],
                                        'n_jobs': [-1, 1]},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:26:05 - model - INFO - R2 Score: -0.1691453486630785
2023-09-25 21:26:05 - model - INFO - Mean Absolute Error: 515.2329368632633
2023-09-25 21:26:05 - model - INFO - Mean Squared Error: 2505959.3524226304
2023-09-25 21:26:05 - model - INFO - Root Mean Squared Error: 1583.022221076707
2023-09-25 21:26:06 - model - INFO - The Linear Regression model has been trained, evaluated -0.1691453486630785, and saved.
2023-09-25 21:35:41 - model - INFO - Starting loading the models
2023-09-25 21:35:41 - model - INFO - loading the Main view model
2023-09-25 21:35:41 - model - INFO - loading the Trade tab model
2023-09-25 21:35:42 - model - INFO - loading the Exchange tab model
2023-09-25 21:35:42 - model - INFO - loading the Bot tab model
2023-09-25 21:35:42 - model - INFO - loading the Chart tab model
2023-09-25 21:35:42 - model - INFO - Finished loading the models
2023-09-25 21:37:04 - model - INFO - machine learning model Linear Regression selected
2023-09-25 21:37:42 - model - INFO - GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-25 21:37:42 - model - INFO - the custom: parallelize search best params are {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1}
2023-09-25 21:37:42 - model - INFO - the custom: parallelize search best score is 0.31187140108468825
2023-09-25 21:37:42 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-25 21:37:42 - model - INFO - R2 Score: 0.44346668129070077
2023-09-25 21:37:42 - model - INFO - Mean Absolute Error: 0.2892209321295314
2023-09-25 21:37:42 - model - INFO - Mean Squared Error: 0.3599845256908421
2023-09-25 21:37:42 - model - INFO - Root Mean Squared Error: 0.5999871046037923
2023-09-25 21:37:42 - model - INFO - The Linear Regression model has been trained, evaluated 0.44346668129070077, and saved.
2023-09-25 21:38:15 - model - INFO - machine learning model SVR selected
2023-09-25 21:39:31 - model - INFO - GridSearchCV(cv=5, estimator=SVR(),
             param_grid={'C': [0.1, 1.0, 10.0], 'degree': [2, 3, 4, 5],
                         'gamma': ['auto', 'scale'],
                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']},
             scoring=make_scorer(<lambda>))
2023-09-25 21:39:31 - model - INFO - the custom: parallelize search best params are {'C': 10.0, 'degree': 2, 'gamma': 'auto', 'kernel': 'poly'}
2023-09-25 21:39:31 - model - INFO - the custom: parallelize search best score is 0.48028533821210095
2023-09-25 21:39:31 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SVR(),
             param_grid={'C': [0.1, 1.0, 10.0], 'degree': [2, 3, 4, 5],
                         'gamma': ['auto', 'scale'],
                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']},
             scoring=make_scorer(<lambda>))
2023-09-25 21:39:31 - model - INFO - R2 Score: -1.51629129372848
2023-09-25 21:39:31 - model - INFO - Mean Absolute Error: 0.29022205926461725
2023-09-25 21:39:31 - model - INFO - Mean Squared Error: 1.6374961410094537
2023-09-25 21:39:31 - model - INFO - Root Mean Squared Error: 1.2796468813737067
2023-09-25 21:39:31 - model - INFO - The SVR model has been trained, evaluated -1.51629129372848, and saved.
2023-09-25 21:40:07 - model - INFO - machine learning model Ridge Regression selected
2023-09-25 21:40:55 - model - INFO - RandomizedSearchCV(cv=5, estimator=Ridge(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'solver': ['auto', 'svd', 'cholesky',
                                                   'lsqr', 'sparse_cg', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:40:55 - model - INFO - the custom: parallelize search best params are {'solver': 'saga', 'fit_intercept': False, 'alpha': 1.0}
2023-09-25 21:40:55 - model - INFO - the custom: parallelize search best score is 0.2824257635145273
2023-09-25 21:40:55 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=Ridge(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'solver': ['auto', 'svd', 'cholesky',
                                                   'lsqr', 'sparse_cg', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:40:55 - model - INFO - R2 Score: 0.4551445271343466
2023-09-25 21:40:55 - model - INFO - Mean Absolute Error: 0.26155179813536406
2023-09-25 21:40:55 - model - INFO - Mean Squared Error: 0.3551805017635302
2023-09-25 21:40:55 - model - INFO - Root Mean Squared Error: 0.5959702188562196
2023-09-25 21:40:55 - model - INFO - The Ridge Regression model has been trained, evaluated 0.4551445271343466, and saved.
2023-09-25 21:43:52 - model - INFO - Starting loading the models
2023-09-25 21:43:52 - model - INFO - loading the Main view model
2023-09-25 21:43:52 - model - INFO - loading the Trade tab model
2023-09-25 21:43:52 - model - INFO - loading the Exchange tab model
2023-09-25 21:43:52 - model - INFO - loading the Bot tab model
2023-09-25 21:43:52 - model - INFO - loading the Chart tab model
2023-09-25 21:43:52 - model - INFO - Finished loading the models
2023-09-25 21:43:59 - model - INFO - machine learning model Lasso Regression selected
2023-09-25 21:45:01 - model - INFO - RandomizedSearchCV(cv=5, estimator=Lasso(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'positive': [True, False],
                                        'precompute': [True, False],
                                        'selection': ['cyclic', 'random']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:45:01 - model - INFO - the custom: parallelize search best params are {'selection': 'random', 'precompute': True, 'positive': False, 'fit_intercept': False, 'alpha': 1.0}
2023-09-25 21:45:01 - model - INFO - the custom: parallelize search best score is 0.623964512236516
2023-09-25 21:45:01 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=Lasso(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'positive': [True, False],
                                        'precompute': [True, False],
                                        'selection': ['cyclic', 'random']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:45:01 - model - INFO - R2 Score: -0.0024986879603023926
2023-09-25 21:45:01 - model - INFO - Mean Absolute Error: 0.40451863777848285
2023-09-25 21:45:01 - model - INFO - Mean Squared Error: 0.5761811388832527
2023-09-25 21:45:01 - model - INFO - Root Mean Squared Error: 0.7590659647772733
2023-09-25 21:45:01 - model - INFO - The Lasso Regression model has been trained, evaluated -0.0024986879603023926, and saved.
2023-09-25 21:46:29 - model - INFO - machine learning model Elastic Net Regression selected
2023-09-25 21:47:45 - model - INFO - RandomizedSearchCV(cv=5, estimator=ElasticNet(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'l1_ratio': [0.1, 0.5, 0.9],
                                        'positive': [True, False],
                                        'precompute': [True, False],
                                        'selection': ['cyclic', 'random']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:47:45 - model - INFO - the custom: parallelize search best params are {'selection': 'cyclic', 'precompute': False, 'positive': False, 'l1_ratio': 0.1, 'fit_intercept': False, 'alpha': 10.0}
2023-09-25 21:47:45 - model - INFO - the custom: parallelize search best score is 0.6003709684681166
2023-09-25 21:47:45 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=ElasticNet(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'l1_ratio': [0.1, 0.5, 0.9],
                                        'positive': [True, False],
                                        'precompute': [True, False],
                                        'selection': ['cyclic', 'random']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:47:45 - model - INFO - R2 Score: -0.0011593429604956906
2023-09-25 21:47:45 - model - INFO - Mean Absolute Error: 0.4585888224708359
2023-09-25 21:47:45 - model - INFO - Mean Squared Error: 1.6326357132940394
2023-09-25 21:47:45 - model - INFO - Root Mean Squared Error: 1.2777463415302897
2023-09-25 21:47:45 - model - INFO - The Elastic Net Regression model has been trained, evaluated -0.0011593429604956906, and saved.
2023-09-25 21:48:04 - model - INFO - Starting loading the models
2023-09-25 21:48:04 - model - INFO - loading the Main view model
2023-09-25 21:48:04 - model - INFO - loading the Trade tab model
2023-09-25 21:48:04 - model - INFO - loading the Exchange tab model
2023-09-25 21:48:04 - model - INFO - loading the Bot tab model
2023-09-25 21:48:04 - model - INFO - loading the Chart tab model
2023-09-25 21:48:04 - model - INFO - Finished loading the models
2023-09-25 21:48:15 - model - INFO - machine learning model Linear Regression selected
2023-09-25 21:48:49 - model - INFO - GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-25 21:48:49 - model - INFO - the custom: parallelize search best params are {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1}
2023-09-25 21:48:49 - model - INFO - the custom: parallelize search best score is 519.44384
2023-09-25 21:48:49 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-25 21:48:49 - model - INFO - R2 Score: 0.6445365320700003
2023-09-25 21:48:49 - model - INFO - Mean Absolute Error: 415.72996181938043
2023-09-25 21:48:49 - model - INFO - Mean Squared Error: 1005687.2429218367
2023-09-25 21:48:49 - model - INFO - Root Mean Squared Error: 1002.8395898257291
2023-09-25 21:48:49 - model - INFO - The Linear Regression model has been trained, evaluated 0.6445365320700003, and saved.
2023-09-25 21:49:26 - model - INFO - machine learning model SVR selected
2023-09-25 21:50:31 - model - INFO - RandomizedSearchCV(cv=5, estimator=SVR(),
                   param_distributions={'C': [0.1, 1.0, 10.0],
                                        'degree': [2, 3, 4, 5],
                                        'gamma': ['auto', 'scale'],
                                        'kernel': ['linear', 'poly', 'rbf',
                                                   'sigmoid']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:50:31 - model - INFO - the custom: parallelize search best params are {'kernel': 'linear', 'gamma': 'scale', 'degree': 5, 'C': 0.1}
2023-09-25 21:50:31 - model - INFO - the custom: parallelize search best score is 1011.1547200000001
2023-09-25 21:50:31 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=SVR(),
                   param_distributions={'C': [0.1, 1.0, 10.0],
                                        'degree': [2, 3, 4, 5],
                                        'gamma': ['auto', 'scale'],
                                        'kernel': ['linear', 'poly', 'rbf',
                                                   'sigmoid']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:50:31 - model - INFO - R2 Score: -0.032602100157485214
2023-09-25 21:50:31 - model - INFO - Mean Absolute Error: 864.3367168641728
2023-09-25 21:50:31 - model - INFO - Mean Squared Error: 3892969.0836122185
2023-09-25 21:50:31 - model - INFO - Root Mean Squared Error: 1973.0608413356692
2023-09-25 21:50:31 - model - INFO - The SVR model has been trained, evaluated -0.032602100157485214, and saved.
2023-09-25 21:51:04 - model - INFO - machine learning model Ridge Regression selected
2023-09-25 21:51:50 - model - INFO - RandomizedSearchCV(cv=5, estimator=Ridge(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'solver': ['auto', 'svd', 'cholesky',
                                                   'lsqr', 'sparse_cg', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:51:50 - model - INFO - the custom: parallelize search best params are {'solver': 'svd', 'fit_intercept': True, 'alpha': 10.0}
2023-09-25 21:51:50 - model - INFO - the custom: parallelize search best score is 605.6473399999999
2023-09-25 21:51:50 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=Ridge(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'solver': ['auto', 'svd', 'cholesky',
                                                   'lsqr', 'sparse_cg', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:51:50 - model - INFO - R2 Score: 0.7148508642188643
2023-09-25 21:51:50 - model - INFO - Mean Absolute Error: 445.2789995302106
2023-09-25 21:51:50 - model - INFO - Mean Squared Error: 387706.9566316015
2023-09-25 21:51:50 - model - INFO - Root Mean Squared Error: 622.661189276802
2023-09-25 21:51:50 - model - INFO - The Ridge Regression model has been trained, evaluated 0.7148508642188643, and saved.
2023-09-25 21:52:25 - model - INFO - machine learning model Lasso Regression selected
2023-09-25 21:53:27 - model - INFO - GridSearchCV(cv=5, estimator=Lasso(),
             param_grid={'alpha': [0.1, 1.0, 10.0],
                         'fit_intercept': [True, False],
                         'positive': [True, False], 'precompute': [True, False],
                         'selection': ['cyclic', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-25 21:53:27 - model - INFO - the custom: parallelize search best params are {'alpha': 1.0, 'fit_intercept': True, 'positive': True, 'precompute': True, 'selection': 'cyclic'}
2023-09-25 21:53:27 - model - INFO - the custom: parallelize search best score is 452.00134000000014
2023-09-25 21:53:27 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=Lasso(),
             param_grid={'alpha': [0.1, 1.0, 10.0],
                         'fit_intercept': [True, False],
                         'positive': [True, False], 'precompute': [True, False],
                         'selection': ['cyclic', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-25 21:53:27 - model - INFO - R2 Score: 0.7006212509327896
2023-09-25 21:53:27 - model - INFO - Mean Absolute Error: 408.9865278336913
2023-09-25 21:53:27 - model - INFO - Mean Squared Error: 579589.7411413019
2023-09-25 21:53:27 - model - INFO - Root Mean Squared Error: 761.3079148027439
2023-09-25 21:53:27 - model - INFO - The Lasso Regression model has been trained, evaluated 0.7006212509327896, and saved.
2023-09-25 21:54:04 - model - INFO - machine learning model Elastic Net Regression selected
2023-09-25 21:55:15 - model - INFO - GridSearchCV(cv=5, estimator=ElasticNet(),
             param_grid={'alpha': [0.1, 1.0, 10.0],
                         'fit_intercept': [True, False],
                         'l1_ratio': [0.1, 0.5, 0.9], 'positive': [True, False],
                         'precompute': [True, False],
                         'selection': ['cyclic', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-25 21:55:15 - model - INFO - the custom: parallelize search best params are {'alpha': 10.0, 'fit_intercept': True, 'l1_ratio': 0.1, 'positive': True, 'precompute': True, 'selection': 'cyclic'}
2023-09-25 21:55:15 - model - INFO - the custom: parallelize search best score is 1077.18872
2023-09-25 21:55:15 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=ElasticNet(),
             param_grid={'alpha': [0.1, 1.0, 10.0],
                         'fit_intercept': [True, False],
                         'l1_ratio': [0.1, 0.5, 0.9], 'positive': [True, False],
                         'precompute': [True, False],
                         'selection': ['cyclic', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-25 21:55:15 - model - INFO - R2 Score: 0.0971239050631818
2023-09-25 21:55:15 - model - INFO - Mean Absolute Error: 690.4263792047299
2023-09-25 21:55:15 - model - INFO - Mean Squared Error: 4473247.433178073
2023-09-25 21:55:15 - model - INFO - Root Mean Squared Error: 2115.0053033451413
2023-09-25 21:55:15 - model - INFO - The Elastic Net Regression model has been trained, evaluated 0.0971239050631818, and saved.
2023-09-25 21:56:27 - model - INFO - machine learning model Decision Tree Regressor selected
2023-09-25 21:57:41 - model - INFO - GridSearchCV(cv=5, estimator=DecisionTreeRegressor(),
             param_grid={'criterion': ['mse', 'friedman_mse', 'mae'],
                         'max_depth': [None, 10, 20, 30],
                         'min_samples_leaf': [1, 2, 4],
                         'min_samples_split': [2, 5, 10],
                         'splitter': ['best', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-25 21:57:41 - model - INFO - the custom: parallelize search best params are {'criterion': 'mae', 'max_depth': 10, 'min_samples_leaf': 2, 'min_samples_split': 10, 'splitter': 'random'}
2023-09-25 21:57:41 - model - INFO - the custom: parallelize search best score is 563.12354
2023-09-25 21:57:41 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=DecisionTreeRegressor(),
             param_grid={'criterion': ['mse', 'friedman_mse', 'mae'],
                         'max_depth': [None, 10, 20, 30],
                         'min_samples_leaf': [1, 2, 4],
                         'min_samples_split': [2, 5, 10],
                         'splitter': ['best', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-25 21:57:41 - model - INFO - R2 Score: 0.4261309676900097
2023-09-25 21:57:41 - model - INFO - Mean Absolute Error: 194.6154324324324
2023-09-25 21:57:41 - model - INFO - Mean Squared Error: 1177308.7447617566
2023-09-25 21:57:41 - model - INFO - Root Mean Squared Error: 1085.0385913697985
2023-09-25 21:57:41 - model - INFO - The Decision Tree Regressor model has been trained, evaluated 0.4261309676900097, and saved.
2023-09-25 21:58:06 - model - INFO - machine learning model Bayesian Ridge Regression selected
2023-09-25 21:59:14 - model - INFO - RandomizedSearchCV(cv=5, estimator=BayesianRidge(),
                   param_distributions={'alpha_1': [1e-06, 1e-05, 0.0001],
                                        'alpha_2': [1e-06, 1e-05, 0.0001],
                                        'lambda_1': [1e-06, 1e-05, 0.0001],
                                        'lambda_2': [1e-06, 1e-05, 0.0001],
                                        'n_iter': [100, 200, 300],
                                        'tol': [0.001, 0.01, 0.1]},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:59:14 - model - INFO - the custom: parallelize search best params are {'tol': 0.1, 'n_iter': 200, 'lambda_2': 1e-05, 'lambda_1': 1e-05, 'alpha_2': 0.0001, 'alpha_1': 1e-06}
2023-09-25 21:59:14 - model - INFO - the custom: parallelize search best score is 466.95174
2023-09-25 21:59:14 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=BayesianRidge(),
                   param_distributions={'alpha_1': [1e-06, 1e-05, 0.0001],
                                        'alpha_2': [1e-06, 1e-05, 0.0001],
                                        'lambda_1': [1e-06, 1e-05, 0.0001],
                                        'lambda_2': [1e-06, 1e-05, 0.0001],
                                        'n_iter': [100, 200, 300],
                                        'tol': [0.001, 0.01, 0.1]},
                   scoring=make_scorer(<lambda>))
2023-09-25 21:59:14 - model - INFO - R2 Score: 0.6358262910420782
2023-09-25 21:59:14 - model - INFO - Mean Absolute Error: 506.08168846636437
2023-09-25 21:59:14 - model - INFO - Mean Squared Error: 671067.1485386475
2023-09-25 21:59:14 - model - INFO - Root Mean Squared Error: 819.1868825479613
2023-09-25 21:59:14 - model - INFO - The Bayesian Ridge Regression model has been trained, evaluated 0.6358262910420782, and saved.
2023-09-25 21:59:33 - model - INFO - machine learning model SGD Regressor selected
2023-09-25 22:02:00 - model - INFO - GridSearchCV(cv=5, estimator=SGDRegressor(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['squared_loss', 'huber',
                                  'epsilon_insensitive',
                                  'squared_epsilon_insensitive'],
                         'penalty': ['l2', 'l1', 'elasticnet']},
             scoring=make_scorer(<lambda>))
2023-09-25 22:02:00 - model - INFO - the custom: parallelize search best params are {'alpha': 0.01, 'eta0': 0.5, 'l1_ratio': 0.15, 'learning_rate': 'adaptive', 'loss': 'epsilon_insensitive', 'penalty': 'elasticnet'}
2023-09-25 22:02:00 - model - INFO - the custom: parallelize search best score is 1040.0428800000002
2023-09-25 22:02:00 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SGDRegressor(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['squared_loss', 'huber',
                                  'epsilon_insensitive',
                                  'squared_epsilon_insensitive'],
                         'penalty': ['l2', 'l1', 'elasticnet']},
             scoring=make_scorer(<lambda>))
2023-09-25 22:02:00 - model - INFO - R2 Score: 0.042562830746025515
2023-09-25 22:02:00 - model - INFO - Mean Absolute Error: 642.4703879382224
2023-09-25 22:02:00 - model - INFO - Mean Squared Error: 1974805.0391067099
2023-09-25 22:02:00 - model - INFO - Root Mean Squared Error: 1405.2775665706438
2023-09-25 22:02:00 - model - INFO - The SGD Regressor model has been trained, evaluated 0.042562830746025515, and saved.
2023-09-25 22:03:52 - model - INFO - machine learning model Logistic Regression selected
2023-09-25 22:03:52 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:05:00 - model - INFO - RandomizedSearchCV(cv=5, estimator=LogisticRegression(),
                   param_distributions={'C': [0.1, 1.0, 10.0],
                                        'max_iter': [1000, 1500, 2000],
                                        'penalty': ['l2'],
                                        'solver': ['newton-cg', 'lbfgs',
                                                   'liblinear', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 22:05:00 - model - INFO - the custom: parallelize search best params are {'solver': 'lbfgs', 'penalty': 'l2', 'max_iter': 1000, 'C': 1.0}
2023-09-25 22:05:00 - model - INFO - the custom: parallelize search best score is 0.47000000000000003
2023-09-25 22:05:00 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=LogisticRegression(),
                   param_distributions={'C': [0.1, 1.0, 10.0],
                                        'max_iter': [1000, 1500, 2000],
                                        'penalty': ['l2'],
                                        'solver': ['newton-cg', 'lbfgs',
                                                   'liblinear', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 22:05:00 - model - INFO - Accuracy: 0.5513513513513514
2023-09-25 22:05:00 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.56      0.52      0.54        93
         1.0       0.55      0.59      0.57        92

    accuracy                           0.55       185
   macro avg       0.55      0.55      0.55       185
weighted avg       0.55      0.55      0.55       185

2023-09-25 22:05:00 - model - INFO - The Logistic Regression model has been trained, evaluated 0.5513513513513514, and saved.
2023-09-25 22:09:54 - model - INFO - machine learning model Decision Tree Classifier selected
2023-09-25 22:09:54 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:10:57 - model - INFO - GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': [3, 5, 10],
                         'min_samples_leaf': [1, 2, 3, 4, 5],
                         'min_samples_split': [2, 5, 10]},
             scoring=make_scorer(<lambda>))
2023-09-25 22:10:57 - model - INFO - the custom: parallelize search best params are {'criterion': 'gini', 'max_depth': 3, 'min_samples_leaf': 5, 'min_samples_split': 2}
2023-09-25 22:10:57 - model - INFO - the custom: parallelize search best score is 0.5599999999999999
2023-09-25 22:10:57 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=DecisionTreeClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': [3, 5, 10],
                         'min_samples_leaf': [1, 2, 3, 4, 5],
                         'min_samples_split': [2, 5, 10]},
             scoring=make_scorer(<lambda>))
2023-09-25 22:10:57 - model - INFO - Accuracy: 0.572972972972973
2023-09-25 22:10:57 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.54      0.62      0.58        87
         1.0       0.61      0.53      0.57        98

    accuracy                           0.57       185
   macro avg       0.58      0.58      0.57       185
weighted avg       0.58      0.57      0.57       185

2023-09-25 22:10:57 - model - INFO - The Decision Tree Classifier model has been trained, evaluated 0.572972972972973, and saved.
2023-09-25 22:13:25 - model - INFO - machine learning model Random Forest Classifier selected
2023-09-25 22:13:25 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:16:27 - model - INFO - machine learning model SVC selected
2023-09-25 22:16:27 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:18:01 - model - INFO - GridSearchCV(cv=5, estimator=SVC(),
             param_grid={'C': [0.1, 1.0, 10.0], 'degree': [2, 3, 4, 5],
                         'gamma': ['auto', 'scale'],
                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']},
             scoring=make_scorer(<lambda>))
2023-09-25 22:18:01 - model - INFO - the custom: parallelize search best params are {'C': 1.0, 'degree': 5, 'gamma': 'scale', 'kernel': 'poly'}
2023-09-25 22:18:01 - model - INFO - the custom: parallelize search best score is 0.61
2023-09-25 22:18:01 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SVC(),
             param_grid={'C': [0.1, 1.0, 10.0], 'degree': [2, 3, 4, 5],
                         'gamma': ['auto', 'scale'],
                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']},
             scoring=make_scorer(<lambda>))
2023-09-25 22:18:01 - model - INFO - Accuracy: 0.518918918918919
2023-09-25 22:18:01 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.50      0.94      0.66        90
         0.0       0.00      0.00      0.00         2
         1.0       0.69      0.12      0.20        93

    accuracy                           0.52       185
   macro avg       0.40      0.35      0.29       185
weighted avg       0.59      0.52      0.42       185

2023-09-25 22:18:02 - model - INFO - The SVC model has been trained, evaluated 0.518918918918919, and saved.
2023-09-25 22:21:31 - model - INFO - machine learning model Isolation Forest selected
2023-09-25 22:21:31 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:23:56 - model - INFO - machine learning model Gradient Boosting Classifier selected
2023-09-25 22:23:56 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:25:49 - model - INFO - machine learning model Extra Tree Classifier selected
2023-09-25 22:25:49 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:26:27 - model - ERROR - Exception occurred during model search: ExponentialLoss requires 2 classes; got 3 class(es)
2023-09-25 22:27:32 - model - INFO - GridSearchCV(cv=5, estimator=ExtraTreeClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': [2, 4, 6, 8, 10],
                         'min_samples_leaf': [1, 2, 3, 4, 5],
                         'min_samples_split': [2, 4, 6, 8, 10]},
             scoring=make_scorer(<lambda>))
2023-09-25 22:27:32 - model - INFO - the custom: parallelize search best params are {'criterion': 'gini', 'max_depth': 2, 'min_samples_leaf': 4, 'min_samples_split': 2}
2023-09-25 22:27:32 - model - INFO - the custom: parallelize search best score is 0.722
2023-09-25 22:27:32 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=ExtraTreeClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': [2, 4, 6, 8, 10],
                         'min_samples_leaf': [1, 2, 3, 4, 5],
                         'min_samples_split': [2, 4, 6, 8, 10]},
             scoring=make_scorer(<lambda>))
2023-09-25 22:27:32 - model - INFO - Accuracy: 0.4972972972972973
2023-09-25 22:27:32 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.49      0.93      0.64        89
         0.0       0.00      0.00      0.00         1
         1.0       0.60      0.09      0.16        95

    accuracy                           0.50       185
   macro avg       0.36      0.34      0.27       185
weighted avg       0.54      0.50      0.39       185

2023-09-25 22:27:33 - model - INFO - The Extra Tree Classifier model has been trained, evaluated 0.4972972972972973, and saved.
2023-09-25 22:28:42 - model - INFO - Starting loading the models
2023-09-25 22:28:42 - model - INFO - loading the Main view model
2023-09-25 22:28:42 - model - INFO - loading the Trade tab model
2023-09-25 22:28:42 - model - INFO - loading the Exchange tab model
2023-09-25 22:28:42 - model - INFO - loading the Bot tab model
2023-09-25 22:28:42 - model - INFO - loading the Chart tab model
2023-09-25 22:28:42 - model - INFO - Finished loading the models
2023-09-25 22:29:39 - model - INFO - machine learning model Random Forest Classifier selected
2023-09-25 22:29:39 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:32:50 - model - INFO - machine learning model Isolation Forest selected
2023-09-25 22:32:50 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:33:11 - model - INFO - machine learning model Extra Tree Classifier selected
2023-09-25 22:33:11 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:33:49 - model - INFO - machine learning model XGBoost Classifier selected
2023-09-25 22:33:49 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:35:33 - model - INFO - GridSearchCV(cv=5, estimator=ExtraTreeClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': [3, 4, 6, 8, 10],
                         'min_samples_leaf': [1, 2, 3, 4, 5],
                         'min_samples_split': [2, 4, 6, 8, 10]},
             scoring=make_scorer(<lambda>))
2023-09-25 22:35:33 - model - INFO - the custom: parallelize search best params are {'criterion': 'gini', 'max_depth': 6, 'min_samples_leaf': 2, 'min_samples_split': 8}
2023-09-25 22:35:33 - model - INFO - the custom: parallelize search best score is 0.754
2023-09-25 22:35:33 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=ExtraTreeClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': [3, 4, 6, 8, 10],
                         'min_samples_leaf': [1, 2, 3, 4, 5],
                         'min_samples_split': [2, 4, 6, 8, 10]},
             scoring=make_scorer(<lambda>))
2023-09-25 22:35:33 - model - INFO - Accuracy: 0.42162162162162165
2023-09-25 22:35:33 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.38      0.19      0.25        94
         0.0       0.00      0.00      0.00         1
         1.0       0.44      0.67      0.53        90

    accuracy                           0.42       185
   macro avg       0.27      0.29      0.26       185
weighted avg       0.40      0.42      0.39       185

2023-09-25 22:35:34 - model - INFO - The Extra Tree Classifier model has been trained, evaluated 0.42162162162162165, and saved.
2023-09-25 22:40:22 - model - INFO - machine learning model Gaussian Naive Bayes selected
2023-09-25 22:40:22 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:41:04 - model - INFO - GridSearchCV(cv=5, estimator=GaussianNB(),
             param_grid={'var_smoothing': [1e-09, 1e-08, 1e-07]},
             scoring=make_scorer(<lambda>))
2023-09-25 22:41:04 - model - INFO - the custom: parallelize search best params are {'var_smoothing': 1e-09}
2023-09-25 22:41:04 - model - INFO - the custom: parallelize search best score is 0.658
2023-09-25 22:41:04 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=GaussianNB(),
             param_grid={'var_smoothing': [1e-09, 1e-08, 1e-07]},
             scoring=make_scorer(<lambda>))
2023-09-25 22:41:04 - model - INFO - Accuracy: 0.5837837837837838
2023-09-25 22:41:04 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.59      0.90      0.71       104
         0.0       0.00      0.00      0.00         0
         1.0       0.58      0.17      0.27        81

    accuracy                           0.58       185
   macro avg       0.39      0.36      0.33       185
weighted avg       0.59      0.58      0.52       185

2023-09-25 22:41:04 - model - INFO - The Gaussian Naive Bayes model has been trained, evaluated 0.5837837837837838, and saved.
2023-09-25 22:41:43 - model - INFO - BayesSearchCV(cv=5, estimator=IsolationForest(), scoring=make_scorer(<lambda>),
              search_spaces={'contamination': [0.1, 0.2, 0.3, 0.4, 0.5],
                             'max_samples': ['auto'],
                             'n_estimators': [10, 50, 100, 200, 300]})
2023-09-25 22:41:43 - model - INFO - the custom: parallelize search best params are OrderedDict([('contamination', 0.1), ('max_samples', 'auto'), ('n_estimators', 10)])
2023-09-25 22:41:43 - model - INFO - the custom: parallelize search best score is 0.8160000000000001
2023-09-25 22:41:43 - model - INFO - the custom: parallelize search best estimator is BayesSearchCV(cv=5, estimator=IsolationForest(), scoring=make_scorer(<lambda>),
              search_spaces={'contamination': [0.1, 0.2, 0.3, 0.4, 0.5],
                             'max_samples': ['auto'],
                             'n_estimators': [10, 50, 100, 200, 300]})
2023-09-25 22:41:43 - model - INFO - Accuracy: 0.4972972972972973
2023-09-25 22:41:43 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.43      0.10      0.16        90
         1.0       0.51      0.87      0.64        95

    accuracy                           0.50       185
   macro avg       0.47      0.49      0.40       185
weighted avg       0.47      0.50      0.41       185

2023-09-25 22:41:43 - model - INFO - The Isolation Forest model has been trained, evaluated 0.4972972972972973, and saved.
2023-09-25 22:42:25 - model - INFO - machine learning model Radius Neighbors Classifier selected
2023-09-25 22:42:25 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:42:25 - model - ERROR - Exception occurred during model search: The dtype of outlier_label outliners is inconsistent with classes [-1.  0.  1.] in y.
2023-09-25 22:42:25 - model - ERROR - Exception occurred during model search: All estimators failed to fit
2023-09-25 22:42:32 - model - ERROR - Exception occurred during model search: All estimators failed to fit
2023-09-25 22:44:54 - model - INFO - BayesSearchCV(cv=5,
              estimator=XGBClassifier(base_score=None, booster=None,
                                      colsample_bylevel=None,
                                      colsample_bynode=None,
                                      colsample_bytree=None,
                                      enable_categorical=False, gamma=None,
                                      gpu_id=None, importance_type=None,
                                      interaction_constraints=None,
                                      learning_rate=None, max_delta_step=None,
                                      max_depth=None, min_child_weight=None,
                                      missing=nan, monotone_constraints=None...
                                      num_parallel_tree=None, predictor=None,
                                      random_state=None, reg_alpha=None,
                                      reg_lambda=None, scale_pos_weight=None,
                                      subsample=None, tree_method=None,
                                      validate_parameters=None,
                                      verbosity=None),
              scoring=make_scorer(<lambda>),
              search_spaces={'eta': [0.1, 0.2, 0.3, 0.4, 0.5],
                             'eval_metric': ['mlogloss'],
                             'max_depth': [3, 4, 6, 8, 10],
                             'num_class': [1, 2, 3, 4],
                             'objective': ['binary:logistic', 'multi:softmax']})
2023-09-25 22:44:54 - model - INFO - the custom: parallelize search best params are OrderedDict([('eta', 0.1), ('eval_metric', 'mlogloss'), ('max_depth', 3), ('num_class', 1), ('objective', 'multi:softmax')])
2023-09-25 22:44:54 - model - INFO - the custom: parallelize search best score is 0.54
2023-09-25 22:44:54 - model - INFO - the custom: parallelize search best estimator is BayesSearchCV(cv=5,
              estimator=XGBClassifier(base_score=None, booster=None,
                                      colsample_bylevel=None,
                                      colsample_bynode=None,
                                      colsample_bytree=None,
                                      enable_categorical=False, gamma=None,
                                      gpu_id=None, importance_type=None,
                                      interaction_constraints=None,
                                      learning_rate=None, max_delta_step=None,
                                      max_depth=None, min_child_weight=None,
                                      missing=nan, monotone_constraints=None...
                                      num_parallel_tree=None, predictor=None,
                                      random_state=None, reg_alpha=None,
                                      reg_lambda=None, scale_pos_weight=None,
                                      subsample=None, tree_method=None,
                                      validate_parameters=None,
                                      verbosity=None),
              scoring=make_scorer(<lambda>),
              search_spaces={'eta': [0.1, 0.2, 0.3, 0.4, 0.5],
                             'eval_metric': ['mlogloss'],
                             'max_depth': [3, 4, 6, 8, 10],
                             'num_class': [1, 2, 3, 4],
                             'objective': ['binary:logistic', 'multi:softmax']})
2023-09-25 22:44:54 - model - INFO - Accuracy: 0.572972972972973
2023-09-25 22:44:54 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.56      0.54      0.55        89
         1.0       0.59      0.60      0.59        96

    accuracy                           0.57       185
   macro avg       0.57      0.57      0.57       185
weighted avg       0.57      0.57      0.57       185

2023-09-25 22:44:55 - model - INFO - The XGBoost Classifier model has been trained, evaluated 0.572972972972973, and saved.
2023-09-25 22:48:14 - model - INFO - machine learning model K-Nearest Neighbors selected
2023-09-25 22:48:14 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:49:36 - model - INFO - RandomizedSearchCV(cv=5, estimator=KNeighborsClassifier(),
                   param_distributions={'algorithm': ['auto', 'ball_tree',
                                                      'kd_tree', 'brute'],
                                        'leaf_size': [30, 40, 50],
                                        'n_neighbors': [3, 5, 11, 19],
                                        'p': [1, 2],
                                        'weights': ['uniform', 'distance']},
                   scoring=make_scorer(<lambda>))
2023-09-25 22:49:36 - model - INFO - the custom: parallelize search best params are {'weights': 'uniform', 'p': 1, 'n_neighbors': 19, 'leaf_size': 30, 'algorithm': 'auto'}
2023-09-25 22:49:36 - model - INFO - the custom: parallelize search best score is 0.7120000000000001
2023-09-25 22:49:36 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=KNeighborsClassifier(),
                   param_distributions={'algorithm': ['auto', 'ball_tree',
                                                      'kd_tree', 'brute'],
                                        'leaf_size': [30, 40, 50],
                                        'n_neighbors': [3, 5, 11, 19],
                                        'p': [1, 2],
                                        'weights': ['uniform', 'distance']},
                   scoring=make_scorer(<lambda>))
2023-09-25 22:49:36 - model - INFO - Accuracy: 0.5567567567567567
2023-09-25 22:49:36 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.55      0.51      0.53        90
         0.0       0.00      0.00      0.00         1
         1.0       0.56      0.61      0.58        94

    accuracy                           0.56       185
   macro avg       0.37      0.37      0.37       185
weighted avg       0.55      0.56      0.55       185

2023-09-25 22:49:36 - model - INFO - The K-Nearest Neighbors model has been trained, evaluated 0.5567567567567567, and saved.
2023-09-25 22:50:08 - model - INFO - Starting loading the models
2023-09-25 22:50:08 - model - INFO - loading the Main view model
2023-09-25 22:50:08 - model - INFO - loading the Trade tab model
2023-09-25 22:50:08 - model - INFO - loading the Exchange tab model
2023-09-25 22:50:08 - model - INFO - loading the Bot tab model
2023-09-25 22:50:08 - model - INFO - loading the Chart tab model
2023-09-25 22:50:08 - model - INFO - Finished loading the models
2023-09-25 22:50:25 - model - INFO - machine learning model XGBoost Classifier selected
2023-09-25 22:50:25 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:50:35 - model - INFO - machine learning model Gaussian Naive Bayes selected
2023-09-25 22:50:35 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:51:12 - model - INFO - RandomizedSearchCV(cv=5, estimator=GaussianNB(),
                   param_distributions={'var_smoothing': [1e-09, 1e-08, 1e-07]},
                   scoring=make_scorer(<lambda>))
2023-09-25 22:51:12 - model - INFO - the custom: parallelize search best params are {'var_smoothing': 1e-09}
2023-09-25 22:51:12 - model - INFO - the custom: parallelize search best score is 0.54
2023-09-25 22:51:12 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=GaussianNB(),
                   param_distributions={'var_smoothing': [1e-09, 1e-08, 1e-07]},
                   scoring=make_scorer(<lambda>))
2023-09-25 22:51:12 - model - INFO - Accuracy: 0.4594594594594595
2023-09-25 22:51:12 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.47      0.78      0.58        90
         0.0       0.00      0.00      0.00         1
         1.0       0.43      0.16      0.23        94

    accuracy                           0.46       185
   macro avg       0.30      0.31      0.27       185
weighted avg       0.44      0.46      0.40       185

2023-09-25 22:51:13 - model - INFO - The Gaussian Naive Bayes model has been trained, evaluated 0.4594594594594595, and saved.
2023-09-25 22:51:52 - model - INFO - machine learning model Radius Neighbors Classifier selected
2023-09-25 22:51:52 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:51:52 - model - ERROR - Exception occurred during model search: The dtype of outlier_label outliners is inconsistent with classes [-1.  0.  1.] in y.
2023-09-25 22:51:53 - model - ERROR - Exception occurred during model search: All estimators failed to fit
2023-09-25 22:52:00 - model - ERROR - Exception occurred during model search: All estimators failed to fit
2023-09-25 22:52:59 - model - INFO - RandomizedSearchCV(cv=5,
                   estimator=XGBClassifier(base_score=None, booster=None,
                                           colsample_bylevel=None,
                                           colsample_bynode=None,
                                           colsample_bytree=None,
                                           enable_categorical=False, gamma=None,
                                           gpu_id=None, importance_type=None,
                                           interaction_constraints=None,
                                           learning_rate=None,
                                           max_delta_step=None, max_depth=None,
                                           min_child_weight=None, missing=nan,
                                           monotone_constraints...
                                           predictor=None, random_state=None,
                                           reg_alpha=None, reg_lambda=None,
                                           scale_pos_weight=None,
                                           subsample=None, tree_method=None,
                                           validate_parameters=None,
                                           verbosity=None),
                   param_distributions={'eta': [0.1, 0.2, 0.3, 0.4, 0.5],
                                        'eval_metric': ['mlogloss'],
                                        'max_depth': [3, 4, 6, 8, 10],
                                        'num_class': [3],
                                        'objective': ['binary:logistic',
                                                      'multi:softmax']},
                   scoring=make_scorer(<lambda>))
2023-09-25 22:52:59 - model - INFO - the custom: parallelize search best params are {'objective': 'binary:logistic', 'num_class': 3, 'max_depth': 3, 'eval_metric': 'mlogloss', 'eta': 0.1}
2023-09-25 22:52:59 - model - INFO - the custom: parallelize search best score is 0.6639999999999999
2023-09-25 22:52:59 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5,
                   estimator=XGBClassifier(base_score=None, booster=None,
                                           colsample_bylevel=None,
                                           colsample_bynode=None,
                                           colsample_bytree=None,
                                           enable_categorical=False, gamma=None,
                                           gpu_id=None, importance_type=None,
                                           interaction_constraints=None,
                                           learning_rate=None,
                                           max_delta_step=None, max_depth=None,
                                           min_child_weight=None, missing=nan,
                                           monotone_constraints...
                                           predictor=None, random_state=None,
                                           reg_alpha=None, reg_lambda=None,
                                           scale_pos_weight=None,
                                           subsample=None, tree_method=None,
                                           validate_parameters=None,
                                           verbosity=None),
                   param_distributions={'eta': [0.1, 0.2, 0.3, 0.4, 0.5],
                                        'eval_metric': ['mlogloss'],
                                        'max_depth': [3, 4, 6, 8, 10],
                                        'num_class': [3],
                                        'objective': ['binary:logistic',
                                                      'multi:softmax']},
                   scoring=make_scorer(<lambda>))
2023-09-25 22:52:59 - model - INFO - Accuracy: 0.6486486486486487
2023-09-25 22:52:59 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.57      0.65      0.61        77
         1.0       0.72      0.65      0.68       108

    accuracy                           0.65       185
   macro avg       0.64      0.65      0.64       185
weighted avg       0.66      0.65      0.65       185

2023-09-25 22:52:59 - model - INFO - The XGBoost Classifier model has been trained, evaluated 0.6486486486486487, and saved.
2023-09-25 22:56:10 - model - INFO - Starting loading the models
2023-09-25 22:56:10 - model - INFO - loading the Main view model
2023-09-25 22:56:10 - model - INFO - loading the Trade tab model
2023-09-25 22:56:10 - model - INFO - loading the Exchange tab model
2023-09-25 22:56:10 - model - INFO - loading the Bot tab model
2023-09-25 22:56:10 - model - INFO - loading the Chart tab model
2023-09-25 22:56:10 - model - INFO - Finished loading the models
2023-09-25 22:56:18 - model - INFO - machine learning model Radius Neighbors Classifier selected
2023-09-25 22:56:18 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:56:18 - model - ERROR - Exception occurred during model search: No neighbors found for test samples array([10], dtype=int64), you can try using larger radius, giving a label for outliers, or considering removing them from your dataset.
2023-09-25 22:56:29 - model - INFO - RandomizedSearchCV(cv=5, estimator=RadiusNeighborsClassifier(),
                   param_distributions={'algorithm': ['auto', 'ball_tree',
                                                      'kd_tree', 'brute'],
                                        'leaf_size': [30, 40, 50], 'p': [1, 2],
                                        'radius': [1, 2, 3, 4, 5, 6, 7, 8, 9,
                                                   10],
                                        'weights': ['uniform', 'distance']},
                   scoring=make_scorer(<lambda>))
2023-09-25 22:56:29 - model - INFO - the custom: parallelize search best params are {'weights': 'distance', 'radius': 6, 'p': 1, 'leaf_size': 50, 'algorithm': 'ball_tree'}
2023-09-25 22:56:29 - model - INFO - the custom: parallelize search best score is nan
2023-09-25 22:56:29 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=RadiusNeighborsClassifier(),
                   param_distributions={'algorithm': ['auto', 'ball_tree',
                                                      'kd_tree', 'brute'],
                                        'leaf_size': [30, 40, 50], 'p': [1, 2],
                                        'radius': [1, 2, 3, 4, 5, 6, 7, 8, 9,
                                                   10],
                                        'weights': ['uniform', 'distance']},
                   scoring=make_scorer(<lambda>))
2023-09-25 22:56:29 - model - INFO - Accuracy: 0.5297297297297298
2023-09-25 22:56:29 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.49      0.73      0.58        84
         1.0       0.62      0.37      0.46       101

    accuracy                           0.53       185
   macro avg       0.55      0.55      0.52       185
weighted avg       0.56      0.53      0.52       185

2023-09-25 22:56:29 - model - INFO - The Radius Neighbors Classifier model has been trained, evaluated 0.5297297297297298, and saved.
2023-09-25 22:58:05 - model - INFO - machine learning model K-Nearest Neighbors selected
2023-09-25 22:58:05 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:58:18 - model - INFO - machine learning model Gradient Boosting Regressor selected
2023-09-25 22:58:18 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:58:20 - model - INFO - machine learning model Gaussian Process Classifier selected
2023-09-25 22:58:20 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:58:22 - model - INFO - machine learning model Quadratic Discriminant Analysis selected
2023-09-25 22:58:22 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:58:25 - model - INFO - machine learning model SGD Classifier selected
2023-09-25 22:58:25 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:58:44 - model - INFO - machine learning model MLPClassifier selected
2023-09-25 22:58:44 - model - INFO - 0     -1.0
1      1.0
2     -1.0
3      1.0
4      1.0
      ... 
919    0.0
920    0.0
921    0.0
922    0.0
923    0.0
Name: label, Length: 924, dtype: float64
2023-09-25 22:58:44 - model - ERROR - Exception occurred during model search: can only convert an array of size 1 to a Python scalar
2023-09-25 23:00:46 - model - INFO - RandomizedSearchCV(cv=5, estimator=QuadraticDiscriminantAnalysis(),
                   param_distributions={'reg_param': [0.0, 0.1, 0.2],
                                        'store_covariance': [True, False],
                                        'tol': [0.0001, 0.001, 0.01]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:00:46 - model - INFO - the custom: parallelize search best params are {'tol': 0.01, 'store_covariance': True, 'reg_param': 0.2}
2023-09-25 23:00:46 - model - INFO - the custom: parallelize search best score is 0.694
2023-09-25 23:00:46 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=QuadraticDiscriminantAnalysis(),
                   param_distributions={'reg_param': [0.0, 0.1, 0.2],
                                        'store_covariance': [True, False],
                                        'tol': [0.0001, 0.001, 0.01]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:00:46 - model - INFO - Accuracy: 0.4918918918918919
2023-09-25 23:00:46 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.46      0.89      0.61        81
         0.0       0.00      0.00      0.00         0
         1.0       0.68      0.18      0.29       104

    accuracy                           0.49       185
   macro avg       0.38      0.36      0.30       185
weighted avg       0.58      0.49      0.43       185

2023-09-25 23:00:47 - model - INFO - The Quadratic Discriminant Analysis model has been trained, evaluated 0.4918918918918919, and saved.
2023-09-25 23:02:01 - model - INFO - GridSearchCV(cv=5, estimator=KNeighborsClassifier(),
             param_grid={'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],
                         'leaf_size': [30, 40, 50],
                         'n_neighbors': [3, 5, 11, 19], 'p': [1, 2],
                         'weights': ['uniform', 'distance']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:02:01 - model - INFO - the custom: parallelize search best params are {'algorithm': 'auto', 'leaf_size': 30, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2023-09-25 23:02:01 - model - INFO - the custom: parallelize search best score is 0.6060000000000001
2023-09-25 23:02:01 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=KNeighborsClassifier(),
             param_grid={'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],
                         'leaf_size': [30, 40, 50],
                         'n_neighbors': [3, 5, 11, 19], 'p': [1, 2],
                         'weights': ['uniform', 'distance']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:02:01 - model - INFO - Accuracy: 0.5567567567567567
2023-09-25 23:02:01 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.52      0.59      0.55        86
         0.0       0.00      0.00      0.00         1
         1.0       0.60      0.53      0.56        98

    accuracy                           0.56       185
   macro avg       0.37      0.37      0.37       185
weighted avg       0.56      0.56      0.56       185

2023-09-25 23:02:02 - model - INFO - The K-Nearest Neighbors model has been trained, evaluated 0.5567567567567567, and saved.
2023-09-25 23:02:10 - model - INFO - GridSearchCV(cv=5, estimator=SGDClassifier(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['hinge', 'log', 'modified_huber',
                                  'squared_hinge', 'perceptron'],
                         'penalty': ['l2', 'l1', 'elasticnet']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:02:10 - model - INFO - the custom: parallelize search best params are {'alpha': 0.01, 'eta0': 0.5, 'l1_ratio': 0.5, 'learning_rate': 'adaptive', 'loss': 'perceptron', 'penalty': 'l1'}
2023-09-25 23:02:10 - model - INFO - the custom: parallelize search best score is 0.9899999999999999
2023-09-25 23:02:10 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SGDClassifier(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['hinge', 'log', 'modified_huber',
                                  'squared_hinge', 'perceptron'],
                         'penalty': ['l2', 'l1', 'elasticnet']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:02:10 - model - INFO - Accuracy: 0.4864864864864865
2023-09-25 23:02:10 - model - INFO - Classification Report:
              precision    recall  f1-score   support

        -1.0       0.46      0.90      0.61        82
         0.0       0.00      0.00      0.00         1
         1.0       0.67      0.16      0.25       102

    accuracy                           0.49       185
   macro avg       0.38      0.35      0.29       185
weighted avg       0.57      0.49      0.41       185

2023-09-25 23:02:11 - model - INFO - The SGD Classifier model has been trained, evaluated 0.4864864864864865, and saved.
2023-09-25 23:09:07 - model - INFO - Starting loading the models
2023-09-25 23:09:07 - model - INFO - loading the Main view model
2023-09-25 23:09:07 - model - INFO - loading the Trade tab model
2023-09-25 23:09:07 - model - INFO - loading the Exchange tab model
2023-09-25 23:09:07 - model - INFO - loading the Bot tab model
2023-09-25 23:09:07 - model - INFO - loading the Chart tab model
2023-09-25 23:09:07 - model - INFO - Finished loading the models
2023-09-25 23:10:12 - model - INFO - machine learning model Linear Regression selected
2023-09-25 23:10:49 - model - INFO - RandomizedSearchCV(cv=5, estimator=LinearRegression(),
                   param_distributions={'copy_X': [True, False],
                                        'fit_intercept': [True, False],
                                        'n_jobs': [-1, 1]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:10:49 - model - INFO - the custom: parallelize search best params are {'n_jobs': -1, 'fit_intercept': True, 'copy_X': True}
2023-09-25 23:10:49 - model - INFO - the custom: parallelize search best score is 600.9311
2023-09-25 23:10:49 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=LinearRegression(),
                   param_distributions={'copy_X': [True, False],
                                        'fit_intercept': [True, False],
                                        'n_jobs': [-1, 1]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:10:49 - model - INFO - R2 Score: 0.7617756474723052
2023-09-25 23:10:49 - model - INFO - Mean Absolute Error: 434.48939036945865
2023-09-25 23:10:49 - model - INFO - Mean Squared Error: 387836.0897136765
2023-09-25 23:10:49 - model - INFO - Root Mean Squared Error: 622.7648751444452
2023-09-25 23:10:50 - model - INFO - The Linear Regression model has been trained, evaluated 0.7617756474723052, and saved.
2023-09-25 23:11:16 - model - INFO - machine learning model SVR selected
2023-09-25 23:11:19 - model - INFO - machine learning model Ridge Regression selected
2023-09-25 23:11:21 - model - INFO - machine learning model Lasso Regression selected
2023-09-25 23:11:23 - model - INFO - machine learning model Elastic Net Regression selected
2023-09-25 23:11:29 - model - INFO - machine learning model Decision Tree Regressor selected
2023-09-25 23:11:32 - model - INFO - machine learning model Bayesian Ridge Regression selected
2023-09-25 23:11:35 - model - INFO - machine learning model SGD Regressor selected
2023-09-25 23:16:01 - model - INFO - RandomizedSearchCV(cv=5, estimator=Ridge(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'solver': ['auto', 'svd', 'cholesky',
                                                   'lsqr', 'sparse_cg', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:16:01 - model - INFO - the custom: parallelize search best params are {'solver': 'svd', 'fit_intercept': True, 'alpha': 10.0}
2023-09-25 23:16:01 - model - INFO - the custom: parallelize search best score is 473.88228000000026
2023-09-25 23:16:01 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=Ridge(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'solver': ['auto', 'svd', 'cholesky',
                                                   'lsqr', 'sparse_cg', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:16:01 - model - INFO - R2 Score: 0.0883949955358806
2023-09-25 23:16:01 - model - INFO - Mean Absolute Error: 473.4897197369656
2023-09-25 23:16:01 - model - INFO - Mean Squared Error: 1262619.7386562857
2023-09-25 23:16:01 - model - INFO - Root Mean Squared Error: 1123.6635344516105
2023-09-25 23:16:04 - model - INFO - The Ridge Regression model has been trained, evaluated 0.0883949955358806, and saved.
2023-09-25 23:16:39 - model - INFO - RandomizedSearchCV(cv=5, estimator=BayesianRidge(),
                   param_distributions={'alpha_1': [1e-06, 1e-05, 0.0001],
                                        'alpha_2': [1e-06, 1e-05, 0.0001],
                                        'lambda_1': [1e-06, 1e-05, 0.0001],
                                        'lambda_2': [1e-06, 1e-05, 0.0001],
                                        'n_iter': [100, 200, 300],
                                        'tol': [0.001, 0.01, 0.1]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:16:39 - model - INFO - the custom: parallelize search best params are {'tol': 0.01, 'n_iter': 100, 'lambda_2': 1e-05, 'lambda_1': 1e-05, 'alpha_2': 0.0001, 'alpha_1': 0.0001}
2023-09-25 23:16:39 - model - INFO - the custom: parallelize search best score is 478.05966
2023-09-25 23:16:39 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=BayesianRidge(),
                   param_distributions={'alpha_1': [1e-06, 1e-05, 0.0001],
                                        'alpha_2': [1e-06, 1e-05, 0.0001],
                                        'lambda_1': [1e-06, 1e-05, 0.0001],
                                        'lambda_2': [1e-06, 1e-05, 0.0001],
                                        'n_iter': [100, 200, 300],
                                        'tol': [0.001, 0.01, 0.1]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:16:39 - model - INFO - R2 Score: 0.7611916895498717
2023-09-25 23:16:39 - model - INFO - Mean Absolute Error: 434.30941765604956
2023-09-25 23:16:39 - model - INFO - Mean Squared Error: 418774.64800377144
2023-09-25 23:16:39 - model - INFO - Root Mean Squared Error: 647.1279997062185
2023-09-25 23:16:42 - model - INFO - The Bayesian Ridge Regression model has been trained, evaluated 0.7611916895498717, and saved.
2023-09-25 23:16:52 - model - INFO - GridSearchCV(cv=5, estimator=Lasso(),
             param_grid={'alpha': [0.1, 1.0, 10.0],
                         'fit_intercept': [True, False],
                         'positive': [True, False], 'precompute': [True, False],
                         'selection': ['cyclic', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:16:52 - model - INFO - the custom: parallelize search best params are {'alpha': 10.0, 'fit_intercept': True, 'positive': False, 'precompute': True, 'selection': 'cyclic'}
2023-09-25 23:16:52 - model - INFO - the custom: parallelize search best score is 535.0633999999999
2023-09-25 23:16:52 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=Lasso(),
             param_grid={'alpha': [0.1, 1.0, 10.0],
                         'fit_intercept': [True, False],
                         'positive': [True, False], 'precompute': [True, False],
                         'selection': ['cyclic', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:16:52 - model - INFO - R2 Score: 0.39187602194309845
2023-09-25 23:16:52 - model - INFO - Mean Absolute Error: 482.7551752353084
2023-09-25 23:16:52 - model - INFO - Mean Squared Error: 3319592.647733613
2023-09-25 23:16:52 - model - INFO - Root Mean Squared Error: 1821.9749305996536
2023-09-25 23:16:53 - model - INFO - The Lasso Regression model has been trained, evaluated 0.39187602194309845, and saved.
2023-09-25 23:17:06 - model - INFO - RandomizedSearchCV(cv=5, estimator=ElasticNet(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'l1_ratio': [0.1, 0.5, 0.9],
                                        'positive': [True, False],
                                        'precompute': [True, False],
                                        'selection': ['cyclic', 'random']},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:17:06 - model - INFO - the custom: parallelize search best params are {'selection': 'cyclic', 'precompute': False, 'positive': False, 'l1_ratio': 0.1, 'fit_intercept': True, 'alpha': 10.0}
2023-09-25 23:17:06 - model - INFO - the custom: parallelize search best score is 1078.7102200000004
2023-09-25 23:17:06 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=ElasticNet(),
                   param_distributions={'alpha': [0.1, 1.0, 10.0],
                                        'fit_intercept': [True, False],
                                        'l1_ratio': [0.1, 0.5, 0.9],
                                        'positive': [True, False],
                                        'precompute': [True, False],
                                        'selection': ['cyclic', 'random']},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:17:06 - model - INFO - R2 Score: 0.12979363172752356
2023-09-25 23:17:06 - model - INFO - Mean Absolute Error: 714.7727722148952
2023-09-25 23:17:06 - model - INFO - Mean Squared Error: 4026371.3625088255
2023-09-25 23:17:06 - model - INFO - Root Mean Squared Error: 2006.5820099135808
2023-09-25 23:17:07 - model - INFO - The Elastic Net Regression model has been trained, evaluated 0.12979363172752356, and saved.
2023-09-25 23:17:10 - model - INFO - GridSearchCV(cv=5, estimator=SVR(),
             param_grid={'C': [0.1, 1.0, 10.0], 'degree': [2, 3, 4, 5],
                         'gamma': ['auto', 'scale'],
                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:17:10 - model - INFO - the custom: parallelize search best params are {'C': 10.0, 'degree': 2, 'gamma': 'auto', 'kernel': 'rbf'}
2023-09-25 23:17:10 - model - INFO - the custom: parallelize search best score is 875.7147200000002
2023-09-25 23:17:10 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SVR(),
             param_grid={'C': [0.1, 1.0, 10.0], 'degree': [2, 3, 4, 5],
                         'gamma': ['auto', 'scale'],
                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:17:10 - model - INFO - R2 Score: 0.18102765467984683
2023-09-25 23:17:10 - model - INFO - Mean Absolute Error: 419.14411413177646
2023-09-25 23:17:10 - model - INFO - Mean Squared Error: 1419512.7501065938
2023-09-25 23:17:10 - model - INFO - Root Mean Squared Error: 1191.4330657265618
2023-09-25 23:17:10 - model - INFO - The SVR model has been trained, evaluated 0.18102765467984683, and saved.
2023-09-25 23:17:41 - model - INFO - GridSearchCV(cv=5, estimator=DecisionTreeRegressor(),
             param_grid={'criterion': ['mse', 'friedman_mse', 'mae'],
                         'max_depth': [None, 10, 20, 30],
                         'min_samples_leaf': [1, 2, 4],
                         'min_samples_split': [2, 5, 10],
                         'splitter': ['best', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:17:41 - model - INFO - the custom: parallelize search best params are {'criterion': 'mae', 'max_depth': 20, 'min_samples_leaf': 4, 'min_samples_split': 10, 'splitter': 'random'}
2023-09-25 23:17:41 - model - INFO - the custom: parallelize search best score is 377.67726
2023-09-25 23:17:41 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=DecisionTreeRegressor(),
             param_grid={'criterion': ['mse', 'friedman_mse', 'mae'],
                         'max_depth': [None, 10, 20, 30],
                         'min_samples_leaf': [1, 2, 4],
                         'min_samples_split': [2, 5, 10],
                         'splitter': ['best', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:17:41 - model - INFO - R2 Score: 0.4331165631838636
2023-09-25 23:17:41 - model - INFO - Mean Absolute Error: 245.59764864864852
2023-09-25 23:17:41 - model - INFO - Mean Squared Error: 1452308.2648060808
2023-09-25 23:17:41 - model - INFO - Root Mean Squared Error: 1205.1175315321243
2023-09-25 23:17:42 - model - INFO - The Decision Tree Regressor model has been trained, evaluated 0.4331165631838636, and saved.
2023-09-25 23:17:49 - model - INFO - GridSearchCV(cv=5, estimator=SGDRegressor(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['squared_loss', 'huber',
                                  'epsilon_insensitive',
                                  'squared_epsilon_insensitive'],
                         'penalty': ['l2', 'l1', 'elasticnet']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:17:49 - model - INFO - the custom: parallelize search best params are {'alpha': 0.01, 'eta0': 0.1, 'l1_ratio': 0.15, 'learning_rate': 'constant', 'loss': 'epsilon_insensitive', 'penalty': 'l2'}
2023-09-25 23:17:49 - model - INFO - the custom: parallelize search best score is 983.6316399999998
2023-09-25 23:17:49 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SGDRegressor(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['squared_loss', 'huber',
                                  'epsilon_insensitive',
                                  'squared_epsilon_insensitive'],
                         'penalty': ['l2', 'l1', 'elasticnet']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:17:49 - model - INFO - R2 Score: 0.015479689231530536
2023-09-25 23:17:49 - model - INFO - Mean Absolute Error: 814.5640047789632
2023-09-25 23:17:49 - model - INFO - Mean Squared Error: 6680567.104169186
2023-09-25 23:17:49 - model - INFO - Root Mean Squared Error: 2584.67930393099
2023-09-25 23:17:49 - model - INFO - The SGD Regressor model has been trained, evaluated 0.015479689231530536, and saved.
2023-09-25 23:18:23 - model - INFO - Starting loading the models
2023-09-25 23:18:23 - model - INFO - loading the Main view model
2023-09-25 23:18:23 - model - INFO - loading the Trade tab model
2023-09-25 23:18:23 - model - INFO - loading the Exchange tab model
2023-09-25 23:18:23 - model - INFO - loading the Bot tab model
2023-09-25 23:18:23 - model - INFO - loading the Chart tab model
2023-09-25 23:18:23 - model - INFO - Finished loading the models
2023-09-25 23:18:31 - model - INFO - machine learning model Logistic Regression selected
2023-09-25 23:18:31 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:19:32 - model - INFO - RandomizedSearchCV(cv=5, estimator=LogisticRegression(),
                   param_distributions={'C': [0.1, 1.0, 10.0],
                                        'max_iter': [1000, 1500, 2000],
                                        'penalty': ['l2'],
                                        'solver': ['newton-cg', 'lbfgs',
                                                   'liblinear', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:19:32 - model - INFO - the custom: parallelize search best params are {'solver': 'newton-cg', 'penalty': 'l2', 'max_iter': 1000, 'C': 10.0}
2023-09-25 23:19:32 - model - INFO - the custom: parallelize search best score is 0.47000000000000003
2023-09-25 23:19:32 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=LogisticRegression(),
                   param_distributions={'C': [0.1, 1.0, 10.0],
                                        'max_iter': [1000, 1500, 2000],
                                        'penalty': ['l2'],
                                        'solver': ['newton-cg', 'lbfgs',
                                                   'liblinear', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:19:32 - model - INFO - Accuracy: 0.4540540540540541
2023-09-25 23:19:32 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.46      0.58      0.51        66
           0       0.39      0.13      0.20        52
           1       0.46      0.58      0.52        67

    accuracy                           0.45       185
   macro avg       0.44      0.43      0.41       185
weighted avg       0.44      0.45      0.43       185

2023-09-25 23:19:32 - model - INFO - The Logistic Regression model has been trained, evaluated 0.4540540540540541, and saved.
2023-09-25 23:22:10 - model - INFO - Starting loading the models
2023-09-25 23:22:10 - model - INFO - loading the Main view model
2023-09-25 23:22:10 - model - INFO - loading the Trade tab model
2023-09-25 23:22:10 - model - INFO - loading the Exchange tab model
2023-09-25 23:22:10 - model - INFO - loading the Bot tab model
2023-09-25 23:22:10 - model - INFO - loading the Chart tab model
2023-09-25 23:22:10 - model - INFO - Finished loading the models
2023-09-25 23:22:20 - model - INFO - machine learning model MLPClassifier selected
2023-09-25 23:22:20 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:22:22 - model - ERROR - Exception occurred during model search: Not all points are within the bounds of the space.
2023-09-25 23:24:34 - model - INFO - machine learning model Decision Tree Classifier selected
2023-09-25 23:24:34 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:25:46 - model - INFO - BayesSearchCV(cv=5, estimator=DecisionTreeClassifier(),
              scoring=make_scorer(<lambda>),
              search_spaces={'criterion': ['gini', 'entropy'],
                             'max_depth': [3, 5, 10],
                             'min_samples_leaf': [1, 2, 3, 4, 5],
                             'min_samples_split': [3, 5, 10]})
2023-09-25 23:25:46 - model - INFO - the custom: parallelize search best params are OrderedDict([('criterion', 'gini'), ('max_depth', 5), ('min_samples_leaf', 1), ('min_samples_split', 3)])
2023-09-25 23:25:46 - model - INFO - the custom: parallelize search best score is 0.5740000000000001
2023-09-25 23:25:46 - model - INFO - the custom: parallelize search best estimator is BayesSearchCV(cv=5, estimator=DecisionTreeClassifier(),
              scoring=make_scorer(<lambda>),
              search_spaces={'criterion': ['gini', 'entropy'],
                             'max_depth': [3, 5, 10],
                             'min_samples_leaf': [1, 2, 3, 4, 5],
                             'min_samples_split': [3, 5, 10]})
2023-09-25 23:25:46 - model - INFO - Accuracy: 0.42162162162162165
2023-09-25 23:25:46 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.49      0.47      0.48        78
           0       0.35      0.42      0.38        38
           1       0.40      0.36      0.38        69

    accuracy                           0.42       185
   macro avg       0.41      0.42      0.41       185
weighted avg       0.42      0.42      0.42       185

2023-09-25 23:25:46 - model - INFO - The Decision Tree Classifier model has been trained, evaluated 0.42162162162162165, and saved.
2023-09-25 23:26:40 - model - INFO - machine learning model Random Forest Classifier selected
2023-09-25 23:26:40 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:28:25 - model - INFO - machine learning model SVC selected
2023-09-25 23:28:25 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:29:37 - model - INFO - machine learning model Isolation Forest selected
2023-09-25 23:29:37 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:30:12 - model - INFO - GridSearchCV(cv=5, estimator=SVC(),
             param_grid={'C': [0.1, 1.0, 10.0], 'degree': [2, 3, 4, 5],
                         'gamma': ['auto', 'scale'],
                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:30:12 - model - INFO - the custom: parallelize search best params are {'C': 10.0, 'degree': 2, 'gamma': 'scale', 'kernel': 'sigmoid'}
2023-09-25 23:30:12 - model - INFO - the custom: parallelize search best score is 0.58
2023-09-25 23:30:12 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SVC(),
             param_grid={'C': [0.1, 1.0, 10.0], 'degree': [2, 3, 4, 5],
                         'gamma': ['auto', 'scale'],
                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:30:12 - model - INFO - Accuracy: 0.3891891891891892
2023-09-25 23:30:12 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.31      0.43      0.36        53
           0       0.37      0.38      0.37        48
           1       0.50      0.37      0.42        84

    accuracy                           0.39       185
   macro avg       0.39      0.39      0.39       185
weighted avg       0.41      0.39      0.39       185

2023-09-25 23:30:12 - model - INFO - The SVC model has been trained, evaluated 0.3891891891891892, and saved.
2023-09-25 23:33:07 - model - INFO - machine learning model Gradient Boosting Classifier selected
2023-09-25 23:33:07 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:07 - model - ERROR - Exception occurred during model search: ExponentialLoss requires 2 classes; got 3 class(es)
2023-09-25 23:33:09 - model - INFO - machine learning model Extra Tree Classifier selected
2023-09-25 23:33:09 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:12 - model - INFO - machine learning model XGBoost Classifier selected
2023-09-25 23:33:12 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:13 - model - ERROR - Exception occurred during model search: The label must consist of integer labels of form 0, 1, 2, ..., [num_class - 1].
2023-09-25 23:33:14 - model - INFO - machine learning model Gaussian Naive Bayes selected
2023-09-25 23:33:14 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:16 - model - INFO - machine learning model Radius Neighbors Classifier selected
2023-09-25 23:33:17 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:19 - model - INFO - machine learning model K-Nearest Neighbors selected
2023-09-25 23:33:20 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:22 - model - INFO - machine learning model AdaBoost Classifier selected
2023-09-25 23:33:22 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:24 - model - INFO - machine learning model Gradient Boosting Regressor selected
2023-09-25 23:33:24 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:27 - model - INFO - machine learning model Gaussian Process Classifier selected
2023-09-25 23:33:27 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:30 - model - INFO - machine learning model Quadratic Discriminant Analysis selected
2023-09-25 23:33:30 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:32 - model - INFO - machine learning model SGD Classifier selected
2023-09-25 23:33:32 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:33:49 - model - ERROR - Exception occurred during model search: No neighbors found for test samples array([119], dtype=int64), you can try using larger radius, giving a label for outliers, or considering removing them from your dataset.
2023-09-25 23:35:50 - model - INFO - RandomizedSearchCV(cv=5, estimator=GaussianNB(),
                   param_distributions={'var_smoothing': [1e-09, 1e-08, 1e-07]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:35:50 - model - INFO - the custom: parallelize search best params are {'var_smoothing': 1e-09}
2023-09-25 23:35:50 - model - INFO - the custom: parallelize search best score is 0.7779999999999999
2023-09-25 23:35:50 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=GaussianNB(),
                   param_distributions={'var_smoothing': [1e-09, 1e-08, 1e-07]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:35:50 - model - INFO - Accuracy: 0.31891891891891894
2023-09-25 23:35:51 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.50      0.11      0.18        73
           0       0.26      0.86      0.40        42
           1       0.52      0.21      0.30        70

    accuracy                           0.32       185
   macro avg       0.42      0.39      0.29       185
weighted avg       0.45      0.32      0.28       185

2023-09-25 23:35:53 - model - INFO - The Gaussian Naive Bayes model has been trained, evaluated 0.31891891891891894, and saved.
2023-09-25 23:37:25 - model - INFO - RandomizedSearchCV(cv=5, estimator=QuadraticDiscriminantAnalysis(),
                   param_distributions={'reg_param': [0.0, 0.1, 0.2],
                                        'store_covariance': [True, False],
                                        'tol': [0.0001, 0.001, 0.01]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:37:25 - model - INFO - the custom: parallelize search best params are {'tol': 0.001, 'store_covariance': False, 'reg_param': 0.1}
2023-09-25 23:37:25 - model - INFO - the custom: parallelize search best score is 0.992
2023-09-25 23:37:25 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=QuadraticDiscriminantAnalysis(),
                   param_distributions={'reg_param': [0.0, 0.1, 0.2],
                                        'store_covariance': [True, False],
                                        'tol': [0.0001, 0.001, 0.01]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:37:25 - model - INFO - Accuracy: 0.32432432432432434
2023-09-25 23:37:25 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.38      0.07      0.11        74
           0       0.25      0.93      0.40        40
           1       0.69      0.25      0.37        71

    accuracy                           0.32       185
   macro avg       0.44      0.42      0.29       185
weighted avg       0.47      0.32      0.27       185

2023-09-25 23:37:27 - model - INFO - The Quadratic Discriminant Analysis model has been trained, evaluated 0.32432432432432434, and saved.
2023-09-25 23:38:20 - model - INFO - GridSearchCV(cv=5, estimator=ExtraTreeClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': [3, 4, 6, 8, 10],
                         'min_samples_leaf': [1, 2, 3, 4, 5],
                         'min_samples_split': [3, 4, 6, 8, 10]},
             scoring=make_scorer(<lambda>))
2023-09-25 23:38:20 - model - INFO - the custom: parallelize search best params are {'criterion': 'gini', 'max_depth': 8, 'min_samples_leaf': 4, 'min_samples_split': 3}
2023-09-25 23:38:20 - model - INFO - the custom: parallelize search best score is 0.706
2023-09-25 23:38:20 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=ExtraTreeClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': [3, 4, 6, 8, 10],
                         'min_samples_leaf': [1, 2, 3, 4, 5],
                         'min_samples_split': [3, 4, 6, 8, 10]},
             scoring=make_scorer(<lambda>))
2023-09-25 23:38:20 - model - INFO - Accuracy: 0.34594594594594597
2023-09-25 23:38:20 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.00      0.00      0.00        68
           0       0.00      0.00      0.00        53
           1       0.35      1.00      0.51        64

    accuracy                           0.35       185
   macro avg       0.12      0.33      0.17       185
weighted avg       0.12      0.35      0.18       185

2023-09-25 23:38:22 - model - INFO - The Extra Tree Classifier model has been trained, evaluated 0.34594594594594597, and saved.
2023-09-25 23:39:33 - model - INFO - RandomizedSearchCV(cv=5, estimator=KNeighborsClassifier(),
                   param_distributions={'algorithm': ['auto', 'ball_tree',
                                                      'kd_tree', 'brute'],
                                        'leaf_size': [30, 40, 50],
                                        'n_neighbors': [3, 5, 11, 19],
                                        'p': [1, 2],
                                        'weights': ['uniform', 'distance']},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:39:33 - model - INFO - the custom: parallelize search best params are {'weights': 'uniform', 'p': 1, 'n_neighbors': 3, 'leaf_size': 40, 'algorithm': 'kd_tree'}
2023-09-25 23:39:33 - model - INFO - the custom: parallelize search best score is 0.538
2023-09-25 23:39:33 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=KNeighborsClassifier(),
                   param_distributions={'algorithm': ['auto', 'ball_tree',
                                                      'kd_tree', 'brute'],
                                        'leaf_size': [30, 40, 50],
                                        'n_neighbors': [3, 5, 11, 19],
                                        'p': [1, 2],
                                        'weights': ['uniform', 'distance']},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:39:33 - model - INFO - Accuracy: 0.4594594594594595
2023-09-25 23:39:33 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.38      0.58      0.46        57
           0       0.50      0.31      0.38        55
           1       0.56      0.48      0.51        73

    accuracy                           0.46       185
   macro avg       0.48      0.46      0.45       185
weighted avg       0.48      0.46      0.46       185

2023-09-25 23:39:34 - model - INFO - The K-Nearest Neighbors model has been trained, evaluated 0.4594594594594595, and saved.
2023-09-25 23:40:03 - model - INFO - GridSearchCV(cv=5, estimator=SGDClassifier(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['hinge', 'log', 'modified_huber',
                                  'squared_hinge', 'perceptron'],
                         'penalty': ['l2', 'l1', 'elasticnet']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:40:03 - model - INFO - the custom: parallelize search best params are {'alpha': 0.01, 'eta0': 0.1, 'l1_ratio': 0.15, 'learning_rate': 'optimal', 'loss': 'perceptron', 'penalty': 'l1'}
2023-09-25 23:40:03 - model - INFO - the custom: parallelize search best score is 0.6540000000000001
2023-09-25 23:40:03 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SGDClassifier(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['hinge', 'log', 'modified_huber',
                                  'squared_hinge', 'perceptron'],
                         'penalty': ['l2', 'l1', 'elasticnet']},
             scoring=make_scorer(<lambda>))
2023-09-25 23:40:03 - model - INFO - Accuracy: 0.42702702702702705
2023-09-25 23:40:03 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.00      0.00      0.00        66
           0       0.38      0.32      0.35        44
           1       0.45      0.87      0.59        75

    accuracy                           0.43       185
   macro avg       0.27      0.39      0.31       185
weighted avg       0.27      0.43      0.32       185

2023-09-25 23:40:03 - model - INFO - The SGD Classifier model has been trained, evaluated 0.42702702702702705, and saved.
2023-09-25 23:43:24 - model - INFO - RandomizedSearchCV(cv=5, estimator=AdaBoostClassifier(),
                   param_distributions={'algorithm': ['SAMME', 'SAMME.R'],
                                        'learning_rate': [0.01, 0.1, 1.0],
                                        'n_estimators': [50, 100, 150]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:43:24 - model - INFO - the custom: parallelize search best params are {'n_estimators': 50, 'learning_rate': 1.0, 'algorithm': 'SAMME.R'}
2023-09-25 23:43:24 - model - INFO - the custom: parallelize search best score is 0.658
2023-09-25 23:43:24 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=AdaBoostClassifier(),
                   param_distributions={'algorithm': ['SAMME', 'SAMME.R'],
                                        'learning_rate': [0.01, 0.1, 1.0],
                                        'n_estimators': [50, 100, 150]},
                   scoring=make_scorer(<lambda>))
2023-09-25 23:43:24 - model - INFO - Accuracy: 0.518918918918919
2023-09-25 23:43:24 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.54      0.58      0.56        76
           0       0.49      0.44      0.46        43
           1       0.52      0.50      0.51        66

    accuracy                           0.52       185
   macro avg       0.51      0.51      0.51       185
weighted avg       0.52      0.52      0.52       185

2023-09-25 23:43:25 - model - INFO - The AdaBoost Classifier model has been trained, evaluated 0.518918918918919, and saved.
2023-09-25 23:58:26 - model - INFO - Starting loading the models
2023-09-25 23:58:26 - model - INFO - loading the Main view model
2023-09-25 23:58:26 - model - INFO - loading the Trade tab model
2023-09-25 23:58:26 - model - INFO - loading the Exchange tab model
2023-09-25 23:58:26 - model - INFO - loading the Bot tab model
2023-09-25 23:58:26 - model - INFO - loading the Chart tab model
2023-09-25 23:58:26 - model - INFO - Finished loading the models
2023-09-25 23:58:58 - model - INFO - machine learning model Logistic Regression selected
2023-09-25 23:58:58 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-25 23:59:15 - model - INFO - machine learning model Logistic Regression selected
2023-09-25 23:59:15 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 00:00:15 - model - INFO - RandomizedSearchCV(cv=5, estimator=LogisticRegression(),
                   param_distributions={'C': [0.1, 1.0, 10.0],
                                        'max_iter': [1000, 1500, 2000],
                                        'penalty': ['l2'],
                                        'solver': ['newton-cg', 'lbfgs',
                                                   'liblinear', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-26 00:00:15 - model - INFO - the custom: parallelize search best params are {'solver': 'lbfgs', 'penalty': 'l2', 'max_iter': 1000, 'C': 10.0}
2023-09-26 00:00:15 - model - INFO - the custom: parallelize search best score is 0.43
2023-09-26 00:00:15 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=LogisticRegression(),
                   param_distributions={'C': [0.1, 1.0, 10.0],
                                        'max_iter': [1000, 1500, 2000],
                                        'penalty': ['l2'],
                                        'solver': ['newton-cg', 'lbfgs',
                                                   'liblinear', 'sag',
                                                   'saga']},
                   scoring=make_scorer(<lambda>))
2023-09-26 00:00:15 - model - INFO - Accuracy: 0.4540540540540541
2023-09-26 00:00:15 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.43      0.62      0.51        65
           0       0.30      0.07      0.11        45
           1       0.49      0.55      0.52        75

    accuracy                           0.45       185
   macro avg       0.41      0.41      0.38       185
weighted avg       0.43      0.45      0.42       185

2023-09-26 00:00:15 - model - INFO - The Logistic Regression model has been trained, evaluated 0.4540540540540541, and saved.
2023-09-26 17:59:03 - model - INFO - Starting loading the models
2023-09-26 17:59:03 - model - INFO - loading the Main view model
2023-09-26 17:59:03 - model - INFO - loading the Trade tab model
2023-09-26 17:59:03 - model - INFO - loading the Exchange tab model
2023-09-26 17:59:03 - model - INFO - loading the Bot tab model
2023-09-26 17:59:03 - model - INFO - loading the Chart tab model
2023-09-26 17:59:03 - model - INFO - Finished loading the models
2023-09-26 18:08:19 - model - INFO - Starting loading the models
2023-09-26 18:08:19 - model - INFO - loading the Main view model
2023-09-26 18:08:19 - model - INFO - loading the Trade tab model
2023-09-26 18:08:19 - model - INFO - loading the Exchange tab model
2023-09-26 18:08:19 - model - INFO - loading the Bot tab model
2023-09-26 18:08:19 - model - INFO - loading the Chart tab model
2023-09-26 18:08:19 - model - INFO - Finished loading the models
2023-09-26 18:08:24 - model - INFO - machine learning model Linear Regression selected
2023-09-26 18:08:58 - model - INFO - RandomizedSearchCV(cv=5, estimator=LinearRegression(),
                   param_distributions={'copy_X': [True, False],
                                        'fit_intercept': [True, False],
                                        'n_jobs': [-1, 1]},
                   scoring=make_scorer(<lambda>))
2023-09-26 18:08:58 - model - INFO - the custom: parallelize search best params are {'n_jobs': -1, 'fit_intercept': True, 'copy_X': True}
2023-09-26 18:08:58 - model - INFO - the custom: parallelize search best score is 463.27474
2023-09-26 18:08:58 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=LinearRegression(),
                   param_distributions={'copy_X': [True, False],
                                        'fit_intercept': [True, False],
                                        'n_jobs': [-1, 1]},
                   scoring=make_scorer(<lambda>))
2023-09-26 18:08:58 - model - INFO - R2 Score: 0.7530980658521824
2023-09-26 18:08:58 - model - INFO - Mean Absolute Error: 459.0427616285953
2023-09-26 18:08:58 - model - INFO - Mean Squared Error: 483921.6098278605
2023-09-26 18:08:58 - model - INFO - Root Mean Squared Error: 695.6447439806186
2023-09-26 18:08:59 - model - INFO - The Linear Regression model has been trained, evaluated 0.7530980658521824, and saved.
2023-09-26 18:09:37 - model - INFO - machine learning model SVR selected
2023-09-26 18:10:41 - model - INFO - RandomizedSearchCV(cv=5, estimator=SVR(),
                   param_distributions={'C': array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02]),
                                        'degree': array([2, 3, 4, 5]),
                                        'gamma': ['auto', 'scale'],
                                        'kernel': ['linear', 'poly', 'rbf',
                                                   'sigmoid']},
                   scoring=make_scorer(<lambda>))
2023-09-26 18:10:41 - model - INFO - the custom: parallelize search best params are {'kernel': 'rbf', 'gamma': 'scale', 'degree': 4, 'C': 10.0}
2023-09-26 18:10:41 - model - INFO - the custom: parallelize search best score is 1041.16818
2023-09-26 18:10:41 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=SVR(),
                   param_distributions={'C': array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02]),
                                        'degree': array([2, 3, 4, 5]),
                                        'gamma': ['auto', 'scale'],
                                        'kernel': ['linear', 'poly', 'rbf',
                                                   'sigmoid']},
                   scoring=make_scorer(<lambda>))
2023-09-26 18:10:41 - model - INFO - R2 Score: 0.1788452911704902
2023-09-26 18:10:41 - model - INFO - Mean Absolute Error: 405.03531217135276
2023-09-26 18:10:41 - model - INFO - Mean Squared Error: 1194131.6529121187
2023-09-26 18:10:41 - model - INFO - Root Mean Squared Error: 1092.7633105627763
2023-09-26 18:10:41 - model - INFO - The SVR model has been trained, evaluated 0.1788452911704902, and saved.
2023-09-26 18:13:36 - model - INFO - machine learning model Ridge Regression selected
2023-09-26 18:15:13 - model - INFO - GridSearchCV(cv=5, estimator=Ridge(),
             param_grid={'alpha': array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02]),
                         'fit_intercept': [True, False],
                         'max_iter': array([1000, 1500]),
                         'solver': ['auto', 'svd', 'cholesky', 'lsqr',
                                    'sparse_cg', 'sag', 'saga'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 18:15:13 - model - INFO - the custom: parallelize search best params are {'alpha': 100.0, 'fit_intercept': True, 'max_iter': 1000, 'solver': 'sparse_cg', 'tol': 0.1}
2023-09-26 18:15:13 - model - INFO - the custom: parallelize search best score is 649.5002799999997
2023-09-26 18:15:13 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=Ridge(),
             param_grid={'alpha': array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02]),
                         'fit_intercept': [True, False],
                         'max_iter': array([1000, 1500]),
                         'solver': ['auto', 'svd', 'cholesky', 'lsqr',
                                    'sparse_cg', 'sag', 'saga'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 18:15:13 - model - INFO - R2 Score: 0.2491719926516941
2023-09-26 18:15:13 - model - INFO - Mean Absolute Error: 507.9267714791575
2023-09-26 18:15:13 - model - INFO - Mean Squared Error: 3814087.862368306
2023-09-26 18:15:13 - model - INFO - Root Mean Squared Error: 1952.968986535195
2023-09-26 18:15:13 - model - INFO - The Ridge Regression model has been trained, evaluated 0.2491719926516941, and saved.
2023-09-26 18:16:33 - model - INFO - machine learning model Lasso Regression selected
2023-09-26 18:17:55 - model - INFO - GridSearchCV(cv=5, estimator=Lasso(),
             param_grid={'alpha': array([  0.1,   1. ,  10. , 100. ]),
                         'fit_intercept': [True, False],
                         'max_iter': array([1000, 1500]),
                         'positive': [True, False], 'precompute': [True, False],
                         'selection': ['cyclic', 'random'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 18:17:55 - model - INFO - the custom: parallelize search best params are {'alpha': 100.0, 'fit_intercept': True, 'max_iter': 1500, 'positive': False, 'precompute': False, 'selection': 'random', 'tol': 0.1}
2023-09-26 18:17:55 - model - INFO - the custom: parallelize search best score is 666.9555399999998
2023-09-26 18:17:55 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=Lasso(),
             param_grid={'alpha': array([  0.1,   1. ,  10. , 100. ]),
                         'fit_intercept': [True, False],
                         'max_iter': array([1000, 1500]),
                         'positive': [True, False], 'precompute': [True, False],
                         'selection': ['cyclic', 'random'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 18:17:55 - model - INFO - R2 Score: 0.548238257214632
2023-09-26 18:17:55 - model - INFO - Mean Absolute Error: 347.24202400661613
2023-09-26 18:17:55 - model - INFO - Mean Squared Error: 1025855.3019123115
2023-09-26 18:17:55 - model - INFO - Root Mean Squared Error: 1012.8451519913157
2023-09-26 18:17:55 - model - INFO - The Lasso Regression model has been trained, evaluated 0.548238257214632, and saved.
2023-09-26 18:23:38 - model - INFO - Starting loading the models
2023-09-26 18:23:38 - model - INFO - loading the Main view model
2023-09-26 18:23:38 - model - INFO - loading the Trade tab model
2023-09-26 18:23:38 - model - INFO - loading the Exchange tab model
2023-09-26 18:23:38 - model - INFO - loading the Bot tab model
2023-09-26 18:23:38 - model - INFO - loading the Chart tab model
2023-09-26 18:23:38 - model - INFO - Finished loading the models
2023-09-26 18:23:46 - model - INFO - machine learning model SVR selected
2023-09-26 18:35:05 - model - INFO - GridSearchCV(cv=5, estimator=SVR(),
             param_grid={'C': array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02]),
                         'degree': array([2, 3, 4, 5, 6, 7]),
                         'epsilon': array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02]),
                         'gamma': ['auto', 'scale'],
                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 18:35:05 - model - INFO - the custom: parallelize search best params are {'C': 0.1, 'degree': 2, 'epsilon': 0.001, 'gamma': 'auto', 'kernel': 'linear', 'tol': 0.001}
2023-09-26 18:35:05 - model - INFO - the custom: parallelize search best score is 1055.13938
2023-09-26 18:35:05 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SVR(),
             param_grid={'C': array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02]),
                         'degree': array([2, 3, 4, 5, 6, 7]),
                         'epsilon': array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02]),
                         'gamma': ['auto', 'scale'],
                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 18:35:05 - model - INFO - R2 Score: 0.032777301941362746
2023-09-26 18:35:05 - model - INFO - Mean Absolute Error: 678.3448254887512
2023-09-26 18:35:05 - model - INFO - Mean Squared Error: 3568907.56207421
2023-09-26 18:35:05 - model - INFO - Root Mean Squared Error: 1889.155250918836
2023-09-26 18:35:06 - model - INFO - The SVR model has been trained, evaluated 0.032777301941362746, and saved.
2023-09-26 18:38:47 - model - INFO - Starting loading the models
2023-09-26 18:38:47 - model - INFO - loading the Main view model
2023-09-26 18:38:47 - model - INFO - loading the Trade tab model
2023-09-26 18:38:47 - model - INFO - loading the Exchange tab model
2023-09-26 18:38:47 - model - INFO - loading the Bot tab model
2023-09-26 18:38:47 - model - INFO - loading the Chart tab model
2023-09-26 18:38:47 - model - INFO - Finished loading the models
2023-09-26 18:38:54 - model - INFO - machine learning model Linear Regression selected
2023-09-26 18:52:23 - model - INFO - Starting loading the models
2023-09-26 18:52:23 - model - INFO - loading the Main view model
2023-09-26 18:52:23 - model - INFO - loading the Trade tab model
2023-09-26 18:52:23 - model - INFO - loading the Exchange tab model
2023-09-26 18:52:23 - model - INFO - loading the Bot tab model
2023-09-26 18:52:23 - model - INFO - loading the Chart tab model
2023-09-26 18:52:23 - model - INFO - Finished loading the models
2023-09-26 18:52:27 - model - INFO - machine learning model Linear Regression selected
2023-09-26 18:55:06 - model - INFO - Starting loading the models
2023-09-26 18:55:06 - model - INFO - loading the Main view model
2023-09-26 18:55:06 - model - INFO - loading the Trade tab model
2023-09-26 18:55:06 - model - INFO - loading the Exchange tab model
2023-09-26 18:55:06 - model - INFO - loading the Bot tab model
2023-09-26 18:55:06 - model - INFO - loading the Chart tab model
2023-09-26 18:55:06 - model - INFO - Finished loading the models
2023-09-26 18:55:10 - model - INFO - machine learning model Linear Regression selected
2023-09-26 18:56:04 - model - INFO - Starting loading the models
2023-09-26 18:56:04 - model - INFO - loading the Main view model
2023-09-26 18:56:04 - model - INFO - loading the Trade tab model
2023-09-26 18:56:04 - model - INFO - loading the Exchange tab model
2023-09-26 18:56:04 - model - INFO - loading the Bot tab model
2023-09-26 18:56:04 - model - INFO - loading the Chart tab model
2023-09-26 18:56:04 - model - INFO - Finished loading the models
2023-09-26 18:56:10 - model - INFO - machine learning model Linear Regression selected
2023-09-26 18:56:43 - model - INFO - GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:24:58 - model - INFO - Starting loading the models
2023-09-26 19:24:58 - model - INFO - loading the Main view model
2023-09-26 19:24:58 - model - INFO - loading the Trade tab model
2023-09-26 19:24:58 - model - INFO - loading the Exchange tab model
2023-09-26 19:24:58 - model - INFO - loading the Bot tab model
2023-09-26 19:24:58 - model - INFO - loading the Chart tab model
2023-09-26 19:24:58 - model - INFO - Finished loading the models
2023-09-26 19:25:02 - model - INFO - machine learning model Linear Regression selected
2023-09-26 19:25:35 - model - INFO - GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:25:35 - model - INFO - Model training successful.
2023-09-26 19:25:35 - model - INFO - the custom: parallelize search best params are {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1}
2023-09-26 19:25:35 - model - INFO - the custom: parallelize search best score is 498.8168599999998
2023-09-26 19:25:35 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:25:35 - model - INFO - R2 Score: 0.47919856989075593
2023-09-26 19:25:35 - model - INFO - Mean Absolute Error: 471.76645539993785
2023-09-26 19:25:35 - model - INFO - Mean Squared Error: 2355499.883459999
2023-09-26 19:25:35 - model - INFO - Root Mean Squared Error: 1534.763787512593
2023-09-26 19:25:35 - model - INFO - Explained Variance Score: 0.4797790584810837
2023-09-26 19:26:44 - model - INFO - Starting loading the models
2023-09-26 19:26:44 - model - INFO - loading the Main view model
2023-09-26 19:26:44 - model - INFO - loading the Trade tab model
2023-09-26 19:26:44 - model - INFO - loading the Exchange tab model
2023-09-26 19:26:44 - model - INFO - loading the Bot tab model
2023-09-26 19:26:44 - model - INFO - loading the Chart tab model
2023-09-26 19:26:44 - model - INFO - Finished loading the models
2023-09-26 19:27:06 - model - INFO - machine learning model Linear Regression selected
2023-09-26 19:27:41 - model - INFO - GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:27:41 - model - INFO - Model training successful.
2023-09-26 19:27:41 - model - INFO - the custom: parallelize search best params are {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1}
2023-09-26 19:27:41 - model - INFO - the custom: parallelize search best score is 520.42492
2023-09-26 19:27:41 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:27:41 - model - INFO - R2 Score: 0.5343502938204251
2023-09-26 19:27:41 - model - INFO - Mean Absolute Error: 533.6971820991243
2023-09-26 19:27:41 - model - INFO - Mean Squared Error: 2330048.8553888816
2023-09-26 19:27:41 - model - INFO - Root Mean Squared Error: 1526.4497552782016
2023-09-26 19:27:41 - model - INFO - Explained Variance Score: 0.5355537913182746
2023-09-26 19:27:41 - model - INFO - The Linear Regression model has been trained, evaluated 0.5343502938204251, and saved.
2023-09-26 19:31:53 - model - INFO - Starting loading the models
2023-09-26 19:31:53 - model - INFO - loading the Main view model
2023-09-26 19:31:53 - model - INFO - loading the Trade tab model
2023-09-26 19:31:53 - model - INFO - loading the Exchange tab model
2023-09-26 19:31:53 - model - INFO - loading the Bot tab model
2023-09-26 19:31:53 - model - INFO - loading the Chart tab model
2023-09-26 19:31:53 - model - INFO - Finished loading the models
2023-09-26 19:32:18 - model - INFO - machine learning model Linear Regression selected
2023-09-26 19:32:52 - model - INFO - GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:32:52 - model - INFO - Model training successful.
2023-09-26 19:32:52 - model - INFO - the custom: parallelize search best params are {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1}
2023-09-26 19:32:52 - model - INFO - the custom: parallelize search best score is 200.05859999999996
2023-09-26 19:32:52 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:32:52 - model - INFO - R2 Score: 0.17368008438430937
2023-09-26 19:32:52 - model - INFO - Mean Absolute Error: 514.4343069400272
2023-09-26 19:32:52 - model - INFO - Mean Squared Error: 2350461.3854431
2023-09-26 19:32:52 - model - INFO - Root Mean Squared Error: 1533.1214516283762
2023-09-26 19:32:52 - model - INFO - Explained Variance Score: 0.17377469812411672
2023-09-26 19:32:52 - model - INFO - The Linear Regression model has been trained, evaluated 0.17368008438430937, and saved.
2023-09-26 19:34:48 - model - INFO - Starting loading the models
2023-09-26 19:34:48 - model - INFO - loading the Main view model
2023-09-26 19:34:48 - model - INFO - loading the Trade tab model
2023-09-26 19:34:48 - model - INFO - loading the Exchange tab model
2023-09-26 19:34:48 - model - INFO - loading the Bot tab model
2023-09-26 19:34:48 - model - INFO - loading the Chart tab model
2023-09-26 19:34:48 - model - INFO - Finished loading the models
2023-09-26 19:34:54 - model - INFO - machine learning model Linear Regression selected
2023-09-26 19:35:28 - model - INFO - GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:35:28 - model - INFO - Model training successful.
2023-09-26 19:35:28 - model - INFO - the custom: parallelize search best params are {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1}
2023-09-26 19:35:28 - model - INFO - the custom: parallelize search best score is 495.9064799999998
2023-09-26 19:35:28 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:35:28 - model - INFO - R2 Score: 0.6589333547801532
2023-09-26 19:35:28 - model - INFO - Mean Absolute Error: 408.26044386354505
2023-09-26 19:35:28 - model - INFO - Mean Squared Error: 440698.3939707116
2023-09-26 19:35:28 - model - INFO - Root Mean Squared Error: 663.8511836027045
2023-09-26 19:35:28 - model - INFO - Explained Variance Score: 0.6661201151057204
2023-09-26 19:35:28 - model - INFO - The Linear Regression model has been trained, evaluated 0.6589333547801532, and saved.
2023-09-26 19:40:27 - model - INFO - Starting loading the models
2023-09-26 19:40:27 - model - INFO - loading the Main view model
2023-09-26 19:40:27 - model - INFO - loading the Trade tab model
2023-09-26 19:40:27 - model - INFO - loading the Exchange tab model
2023-09-26 19:40:27 - model - INFO - loading the Bot tab model
2023-09-26 19:40:27 - model - INFO - loading the Chart tab model
2023-09-26 19:40:27 - model - INFO - Finished loading the models
2023-09-26 19:40:32 - model - INFO - machine learning model Linear Regression selected
2023-09-26 19:41:18 - model - INFO - Starting loading the models
2023-09-26 19:41:18 - model - INFO - loading the Main view model
2023-09-26 19:41:18 - model - INFO - loading the Trade tab model
2023-09-26 19:41:18 - model - INFO - loading the Exchange tab model
2023-09-26 19:41:18 - model - INFO - loading the Bot tab model
2023-09-26 19:41:18 - model - INFO - loading the Chart tab model
2023-09-26 19:41:18 - model - INFO - Finished loading the models
2023-09-26 19:41:22 - model - INFO - machine learning model Linear Regression selected
2023-09-26 19:42:00 - model - INFO - GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:42:00 - model - INFO - Model training successful.
2023-09-26 19:42:00 - model - INFO - the custom: parallelize search best params are {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1}
2023-09-26 19:42:00 - model - INFO - the custom: parallelize search best score is 369.4892400000002
2023-09-26 19:42:00 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=LinearRegression(),
             param_grid={'copy_X': [True, False],
                         'fit_intercept': [True, False], 'n_jobs': [-1, 1]},
             scoring=make_scorer(<lambda>))
2023-09-26 19:42:00 - model - INFO - R2 Score: 0.3414068656623821
2023-09-26 19:42:00 - model - INFO - Mean Absolute Error: 513.2404279991357
2023-09-26 19:42:00 - model - INFO - Mean Squared Error: 2851691.990628152
2023-09-26 19:42:00 - model - INFO - Root Mean Squared Error: 1688.6953516333704
2023-09-26 19:42:00 - model - INFO - Explained Variance Score: 0.3506121389341119
2023-09-26 19:42:00 - model - INFO - The Linear Regression model has been trained, evaluated 0.3414068656623821, and saved.
2023-09-26 19:42:22 - model - INFO - machine learning model SVR selected
2023-09-26 19:43:53 - model - INFO - Starting loading the models
2023-09-26 19:43:53 - model - INFO - loading the Main view model
2023-09-26 19:43:53 - model - INFO - loading the Trade tab model
2023-09-26 19:43:53 - model - INFO - loading the Exchange tab model
2023-09-26 19:43:53 - model - INFO - loading the Bot tab model
2023-09-26 19:43:53 - model - INFO - loading the Chart tab model
2023-09-26 19:43:53 - model - INFO - Finished loading the models
2023-09-26 19:43:57 - model - INFO - machine learning model SVR selected
2023-09-26 19:50:08 - model - INFO - machine learning model Ridge Regression selected
2023-09-26 19:50:18 - model - INFO - machine learning model Lasso Regression selected
2023-09-26 19:50:22 - model - INFO - machine learning model Elastic Net Regression selected
2023-09-26 19:50:24 - model - INFO - machine learning model Decision Tree Regressor selected
2023-09-26 19:50:25 - model - INFO - machine learning model Bayesian Ridge Regression selected
2023-09-26 19:53:45 - model - INFO - machine learning model SGD Regressor selected
2023-09-26 19:53:47 - model - INFO - machine learning model Logistic Regression selected
2023-09-26 19:53:47 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 19:53:50 - model - INFO - machine learning model Decision Tree Classifier selected
2023-09-26 19:53:50 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 19:53:52 - model - INFO - machine learning model Random Forest Classifier selected
2023-09-26 19:53:52 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 19:53:54 - model - INFO - machine learning model SVC selected
2023-09-26 19:53:54 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 19:56:08 - model - INFO - Starting loading the models
2023-09-26 19:56:08 - model - INFO - loading the Main view model
2023-09-26 19:56:08 - model - INFO - loading the Trade tab model
2023-09-26 19:56:08 - model - INFO - loading the Exchange tab model
2023-09-26 19:56:08 - model - INFO - loading the Bot tab model
2023-09-26 19:56:08 - model - INFO - loading the Chart tab model
2023-09-26 19:56:08 - model - INFO - Finished loading the models
2023-09-26 19:56:12 - model - INFO - machine learning model Ridge Regression selected
2023-09-26 19:56:19 - model - INFO - machine learning model Lasso Regression selected
2023-09-26 19:56:21 - model - INFO - machine learning model Elastic Net Regression selected
2023-09-26 19:57:28 - model - INFO - Starting loading the models
2023-09-26 19:57:28 - model - INFO - loading the Main view model
2023-09-26 19:57:28 - model - INFO - loading the Trade tab model
2023-09-26 19:57:28 - model - INFO - loading the Exchange tab model
2023-09-26 19:57:28 - model - INFO - loading the Bot tab model
2023-09-26 19:57:28 - model - INFO - loading the Chart tab model
2023-09-26 19:57:28 - model - INFO - Finished loading the models
2023-09-26 19:57:40 - model - INFO - machine learning model Ridge Regression selected
2023-09-26 19:58:51 - model - INFO - GridSearchCV(cv=5, estimator=Ridge(),
             param_grid={'alpha': array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02]),
                         'fit_intercept': [True, False],
                         'max_iter': array([1000, 1500]),
                         'solver': ['auto', 'svd', 'cholesky', 'lsqr',
                                    'sparse_cg', 'sag', 'saga'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 19:58:51 - model - INFO - Model training successful.
2023-09-26 19:58:51 - model - INFO - the custom: parallelize search best params are {'alpha': 100.0, 'fit_intercept': True, 'max_iter': 1000, 'solver': 'sparse_cg', 'tol': 0.1}
2023-09-26 19:58:51 - model - INFO - the custom: parallelize search best score is 443.35736000000014
2023-09-26 19:58:51 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=Ridge(),
             param_grid={'alpha': array([1.e-03, 1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02]),
                         'fit_intercept': [True, False],
                         'max_iter': array([1000, 1500]),
                         'solver': ['auto', 'svd', 'cholesky', 'lsqr',
                                    'sparse_cg', 'sag', 'saga'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 19:58:51 - model - INFO - R2 Score: 0.6380713164706685
2023-09-26 19:58:51 - model - INFO - Mean Absolute Error: 428.566807633879
2023-09-26 19:58:51 - model - INFO - Mean Squared Error: 1527888.8549455178
2023-09-26 19:58:51 - model - INFO - Root Mean Squared Error: 1236.0780132926554
2023-09-26 19:58:51 - model - INFO - Explained Variance Score: 0.6393759471391396
2023-09-26 19:58:51 - model - INFO - The Ridge Regression model has been trained, evaluated 0.6380713164706685, and saved.
2023-09-26 19:59:24 - model - INFO - machine learning model Lasso Regression selected
2023-09-26 20:00:46 - model - INFO - GridSearchCV(cv=5, estimator=Lasso(),
             param_grid={'alpha': array([  0.1,   1. ,  10. , 100. ]),
                         'fit_intercept': [True, False],
                         'max_iter': array([1000, 1500]),
                         'positive': [True, False], 'precompute': [True, False],
                         'selection': ['cyclic', 'random'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 20:00:46 - model - INFO - Model training successful.
2023-09-26 20:00:46 - model - INFO - the custom: parallelize search best params are {'alpha': 100.0, 'fit_intercept': True, 'max_iter': 1000, 'positive': False, 'precompute': False, 'selection': 'random', 'tol': 0.1}
2023-09-26 20:00:46 - model - INFO - the custom: parallelize search best score is 603.8634200000002
2023-09-26 20:00:46 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=Lasso(),
             param_grid={'alpha': array([  0.1,   1. ,  10. , 100. ]),
                         'fit_intercept': [True, False],
                         'max_iter': array([1000, 1500]),
                         'positive': [True, False], 'precompute': [True, False],
                         'selection': ['cyclic', 'random'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 20:00:46 - model - INFO - R2 Score: 0.3155655630425792
2023-09-26 20:00:46 - model - INFO - Mean Absolute Error: 353.5162416380696
2023-09-26 20:00:46 - model - INFO - Mean Squared Error: 1038920.1720830724
2023-09-26 20:00:46 - model - INFO - Root Mean Squared Error: 1019.2743360268973
2023-09-26 20:00:46 - model - INFO - Explained Variance Score: 0.3199034876851411
2023-09-26 20:00:46 - model - INFO - The Lasso Regression model has been trained, evaluated 0.3155655630425792, and saved.
2023-09-26 20:01:08 - model - INFO - machine learning model Elastic Net Regression selected
2023-09-26 20:02:52 - model - INFO - GridSearchCV(cv=5, estimator=ElasticNet(),
             param_grid={'alpha': array([  0.1,   1. ,  10. , 100. ]),
                         'fit_intercept': [True, False],
                         'l1_ratio': [0.1, 0.5, 0.9],
                         'max_iter': array([1000, 1500]),
                         'positive': [True, False], 'precompute': [True, False],
                         'selection': ['cyclic', 'random'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 20:02:52 - model - INFO - Model training successful.
2023-09-26 20:02:52 - model - INFO - the custom: parallelize search best params are {'alpha': 100.0, 'fit_intercept': True, 'l1_ratio': 0.1, 'max_iter': 1000, 'positive': True, 'precompute': True, 'selection': 'cyclic', 'tol': 0.001}
2023-09-26 20:02:52 - model - INFO - the custom: parallelize search best score is 1168.0269199999998
2023-09-26 20:02:52 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=ElasticNet(),
             param_grid={'alpha': array([  0.1,   1. ,  10. , 100. ]),
                         'fit_intercept': [True, False],
                         'l1_ratio': [0.1, 0.5, 0.9],
                         'max_iter': array([1000, 1500]),
                         'positive': [True, False], 'precompute': [True, False],
                         'selection': ['cyclic', 'random'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 20:02:52 - model - INFO - R2 Score: 0.009905202047273187
2023-09-26 20:02:52 - model - INFO - Mean Absolute Error: 667.2735589848436
2023-09-26 20:02:52 - model - INFO - Mean Squared Error: 1340923.6525170251
2023-09-26 20:02:52 - model - INFO - Root Mean Squared Error: 1157.9825786759598
2023-09-26 20:02:52 - model - INFO - Explained Variance Score: 0.03450921847601296
2023-09-26 20:02:52 - model - INFO - The Elastic Net Regression model has been trained, evaluated 0.009905202047273187, and saved.
2023-09-26 20:05:04 - model - INFO - machine learning model Decision Tree Regressor selected
2023-09-26 20:06:14 - model - INFO - GridSearchCV(cv=5, estimator=DecisionTreeRegressor(),
             param_grid={'criterion': ['mse', 'friedman_mse', 'mae'],
                         'max_depth': [None, 10, 20, 30],
                         'min_samples_leaf': [1, 2, 4],
                         'min_samples_split': [2, 5, 10],
                         'splitter': ['best', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-26 20:06:14 - model - INFO - Model training successful.
2023-09-26 20:06:14 - model - INFO - the custom: parallelize search best params are {'criterion': 'mse', 'max_depth': 20, 'min_samples_leaf': 1, 'min_samples_split': 5, 'splitter': 'random'}
2023-09-26 20:06:14 - model - INFO - the custom: parallelize search best score is 482.1827
2023-09-26 20:06:14 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=DecisionTreeRegressor(),
             param_grid={'criterion': ['mse', 'friedman_mse', 'mae'],
                         'max_depth': [None, 10, 20, 30],
                         'min_samples_leaf': [1, 2, 4],
                         'min_samples_split': [2, 5, 10],
                         'splitter': ['best', 'random']},
             scoring=make_scorer(<lambda>))
2023-09-26 20:06:14 - model - INFO - R2 Score: 0.5595420970157787
2023-09-26 20:06:14 - model - INFO - Mean Absolute Error: 251.25039262899253
2023-09-26 20:06:14 - model - INFO - Mean Squared Error: 1759209.2818217394
2023-09-26 20:06:14 - model - INFO - Root Mean Squared Error: 1326.3518695360365
2023-09-26 20:06:14 - model - INFO - Explained Variance Score: 0.5598157828640289
2023-09-26 20:06:14 - model - INFO - The Decision Tree Regressor model has been trained, evaluated 0.5595420970157787, and saved.
2023-09-26 20:08:44 - model - INFO - machine learning model Bayesian Ridge Regression selected
2023-09-26 20:09:41 - model - INFO - RandomizedSearchCV(cv=5, estimator=BayesianRidge(),
                   param_distributions={'alpha_1': [1e-06, 1e-05, 0.0001],
                                        'alpha_2': [1e-06, 1e-05, 0.0001],
                                        'lambda_1': [1e-06, 1e-05, 0.0001],
                                        'lambda_2': [1e-06, 1e-05, 0.0001],
                                        'n_iter': array([1000, 1500]),
                                        'tol': [0.001, 0.01, 0.1]},
                   scoring=make_scorer(<lambda>))
2023-09-26 20:09:41 - model - INFO - Model training successful.
2023-09-26 20:09:41 - model - INFO - the custom: parallelize search best params are {'tol': 0.001, 'n_iter': 1000, 'lambda_2': 1e-06, 'lambda_1': 1e-05, 'alpha_2': 1e-05, 'alpha_1': 1e-05}
2023-09-26 20:09:41 - model - INFO - the custom: parallelize search best score is 593.0129800000001
2023-09-26 20:09:41 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=BayesianRidge(),
                   param_distributions={'alpha_1': [1e-06, 1e-05, 0.0001],
                                        'alpha_2': [1e-06, 1e-05, 0.0001],
                                        'lambda_1': [1e-06, 1e-05, 0.0001],
                                        'lambda_2': [1e-06, 1e-05, 0.0001],
                                        'n_iter': array([1000, 1500]),
                                        'tol': [0.001, 0.01, 0.1]},
                   scoring=make_scorer(<lambda>))
2023-09-26 20:09:41 - model - INFO - R2 Score: 0.6481653077564464
2023-09-26 20:09:41 - model - INFO - Mean Absolute Error: 415.05377601693647
2023-09-26 20:09:41 - model - INFO - Mean Squared Error: 454252.9612455914
2023-09-26 20:09:41 - model - INFO - Root Mean Squared Error: 673.9829087191985
2023-09-26 20:09:41 - model - INFO - Explained Variance Score: 0.6501092680128278
2023-09-26 20:09:41 - model - INFO - The Bayesian Ridge Regression model has been trained, evaluated 0.6481653077564464, and saved.
2023-09-26 20:09:57 - model - INFO - machine learning model SGD Regressor selected
2023-09-26 20:18:53 - model - INFO - machine learning model Logistic Regression selected
2023-09-26 20:18:53 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:20:06 - model - INFO - GridSearchCV(cv=5, estimator=LogisticRegression(),
             param_grid={'C': array([  0.1,   1. ,  10. , 100. ]),
                         'max_iter': array([1000, 1500]), 'penalty': ['l2'],
                         'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag',
                                    'saga'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 20:20:06 - model - INFO - Model training successful.
2023-09-26 20:20:06 - model - INFO - the custom: parallelize search best params are {'C': 1.0, 'max_iter': 1500, 'penalty': 'l2', 'solver': 'sag', 'tol': 0.1}
2023-09-26 20:20:06 - model - INFO - the custom: parallelize search best score is 0.56
2023-09-26 20:20:06 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=LogisticRegression(),
             param_grid={'C': array([  0.1,   1. ,  10. , 100. ]),
                         'max_iter': array([1000, 1500]), 'penalty': ['l2'],
                         'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag',
                                    'saga'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 20:20:06 - model - INFO - Accuracy: 0.4918918918918919
2023-09-26 20:20:06 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 20:20:06 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.51      0.62      0.56        73
           0       0.42      0.13      0.20        38
           1       0.48      0.55      0.52        74

    accuracy                           0.49       185
   macro avg       0.47      0.43      0.42       185
weighted avg       0.48      0.49      0.47       185

2023-09-26 20:20:06 - model - INFO - The Logistic Regression model has been trained, evaluated 0.4918918918918919, and saved.
2023-09-26 20:20:41 - model - INFO - machine learning model Decision Tree Classifier selected
2023-09-26 20:20:41 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:21:21 - model - INFO - GridSearchCV(cv=5, estimator=SGDRegressor(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['squared_loss', 'huber',
                                  'epsilon_insensitive',
                                  'squared_epsilon_insensitive'],
                         'max_iter': array([1000, 1500]),
                         'penalty': ['l2', 'l1', 'elasticnet'],
                         'shuffle': [True, False]},
             scoring=make_scorer(<lambda>))
2023-09-26 20:21:21 - model - INFO - Model training successful.
2023-09-26 20:21:21 - model - INFO - the custom: parallelize search best params are {'alpha': 0.01, 'eta0': 0.5, 'l1_ratio': 0.15, 'learning_rate': 'constant', 'loss': 'huber', 'max_iter': 1500, 'penalty': 'l2', 'shuffle': False}
2023-09-26 20:21:21 - model - INFO - the custom: parallelize search best score is 955.9451799999999
2023-09-26 20:21:21 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SGDRegressor(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['squared_loss', 'huber',
                                  'epsilon_insensitive',
                                  'squared_epsilon_insensitive'],
                         'max_iter': array([1000, 1500]),
                         'penalty': ['l2', 'l1', 'elasticnet'],
                         'shuffle': [True, False]},
             scoring=make_scorer(<lambda>))
2023-09-26 20:21:21 - model - INFO - R2 Score: -0.06631704778033032
2023-09-26 20:21:21 - model - INFO - Mean Absolute Error: 682.2737760315448
2023-09-26 20:21:21 - model - INFO - Mean Squared Error: 1947026.038822417
2023-09-26 20:21:21 - model - INFO - Root Mean Squared Error: 1395.3587491474789
2023-09-26 20:21:21 - model - INFO - Explained Variance Score: 0.010480911933245851
2023-09-26 20:21:22 - model - INFO - The SGD Regressor model has been trained, evaluated -0.06631704778033032, and saved.
2023-09-26 20:21:41 - model - INFO - BayesSearchCV(cv=5, estimator=DecisionTreeClassifier(),
              scoring=make_scorer(<lambda>),
              search_spaces={'criterion': ['gini', 'entropy'],
                             'max_depth': [3, 5, 10],
                             'min_samples_leaf': [1, 2, 3, 4, 5],
                             'min_samples_split': [3, 5, 10]})
2023-09-26 20:21:41 - model - INFO - Model training successful.
2023-09-26 20:21:41 - model - INFO - the custom: parallelize search best params are OrderedDict([('criterion', 'entropy'), ('max_depth', 10), ('min_samples_leaf', 1), ('min_samples_split', 3)])
2023-09-26 20:21:41 - model - INFO - the custom: parallelize search best score is 0.594
2023-09-26 20:21:41 - model - INFO - the custom: parallelize search best estimator is BayesSearchCV(cv=5, estimator=DecisionTreeClassifier(),
              scoring=make_scorer(<lambda>),
              search_spaces={'criterion': ['gini', 'entropy'],
                             'max_depth': [3, 5, 10],
                             'min_samples_leaf': [1, 2, 3, 4, 5],
                             'min_samples_split': [3, 5, 10]})
2023-09-26 20:21:42 - model - INFO - Accuracy: 0.5027027027027027
2023-09-26 20:21:42 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 20:21:42 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.48      0.59      0.53        69
           0       0.45      0.41      0.43        41
           1       0.57      0.47      0.51        75

    accuracy                           0.50       185
   macro avg       0.50      0.49      0.49       185
weighted avg       0.51      0.50      0.50       185

2023-09-26 20:21:42 - model - INFO - The Decision Tree Classifier model has been trained, evaluated 0.5027027027027027, and saved.
2023-09-26 20:21:56 - model - INFO - machine learning model Random Forest Classifier selected
2023-09-26 20:21:56 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:24:09 - model - INFO - machine learning model SVC selected
2023-09-26 20:24:09 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:24:12 - model - INFO - machine learning model Isolation Forest selected
2023-09-26 20:24:12 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:24:16 - model - INFO - machine learning model Gradient Boosting Classifier selected
2023-09-26 20:24:16 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:24:19 - model - INFO - machine learning model Extra Tree Classifier selected
2023-09-26 20:24:19 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:24:28 - model - INFO - machine learning model XGBoost Classifier selected
2023-09-26 20:24:28 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:24:30 - model - ERROR - Exception occurred during model search: The label must consist of integer labels of form 0, 1, 2, ..., [num_class - 1].
2023-09-26 20:26:10 - model - ERROR - Model training failed: All searches failed!
2023-09-26 20:27:41 - model - INFO - Starting loading the models
2023-09-26 20:27:41 - model - INFO - loading the Main view model
2023-09-26 20:27:41 - model - INFO - loading the Trade tab model
2023-09-26 20:27:41 - model - INFO - loading the Exchange tab model
2023-09-26 20:27:41 - model - INFO - loading the Bot tab model
2023-09-26 20:27:41 - model - INFO - loading the Chart tab model
2023-09-26 20:27:41 - model - INFO - Finished loading the models
2023-09-26 20:28:14 - model - INFO - machine learning model Logistic Regression selected
2023-09-26 20:28:14 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:28:17 - model - INFO - machine learning model Decision Tree Classifier selected
2023-09-26 20:28:18 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:28:20 - model - INFO - machine learning model Random Forest Classifier selected
2023-09-26 20:28:20 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:28:22 - model - INFO - machine learning model SVC selected
2023-09-26 20:28:22 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:28:25 - model - INFO - machine learning model Isolation Forest selected
2023-09-26 20:28:25 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:28:27 - model - INFO - machine learning model Gradient Boosting Classifier selected
2023-09-26 20:28:27 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:28:27 - model - ERROR - Exception occurred during model search: ExponentialLoss requires 2 classes; got 3 class(es)
2023-09-26 20:31:58 - model - INFO - Starting loading the models
2023-09-26 20:31:58 - model - INFO - loading the Main view model
2023-09-26 20:31:58 - model - INFO - loading the Trade tab model
2023-09-26 20:31:58 - model - INFO - loading the Exchange tab model
2023-09-26 20:31:58 - model - INFO - loading the Bot tab model
2023-09-26 20:31:58 - model - INFO - loading the Chart tab model
2023-09-26 20:31:58 - model - INFO - Finished loading the models
2023-09-26 20:32:11 - model - INFO - machine learning model Logistic Regression selected
2023-09-26 20:32:11 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:32:21 - model - INFO - machine learning model Random Forest Classifier selected
2023-09-26 20:32:22 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:32:26 - model - INFO - machine learning model MLPClassifier selected
2023-09-26 20:32:26 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:32:30 - model - ERROR - Exception occurred during model search: Not all points are within the bounds of the space.
2023-09-26 20:34:21 - model - INFO - GridSearchCV(cv=5, estimator=LogisticRegression(),
             param_grid={'C': array([  0.1,   1. ,  10. , 100. ]),
                         'max_iter': array([1000, 1500]), 'penalty': ['l2'],
                         'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag',
                                    'saga'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 20:34:21 - model - INFO - Model training successful.
2023-09-26 20:34:21 - model - INFO - the custom: parallelize search best params are {'C': 100.0, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.1}
2023-09-26 20:34:21 - model - INFO - the custom: parallelize search best score is 0.528
2023-09-26 20:34:21 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=LogisticRegression(),
             param_grid={'C': array([  0.1,   1. ,  10. , 100. ]),
                         'max_iter': array([1000, 1500]), 'penalty': ['l2'],
                         'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag',
                                    'saga'],
                         'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])},
             scoring=make_scorer(<lambda>))
2023-09-26 20:34:21 - model - INFO - Accuracy: 0.4594594594594595
2023-09-26 20:34:21 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 20:34:21 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.53      0.43      0.47        75
           0       0.36      0.30      0.33        46
           1       0.45      0.61      0.52        64

    accuracy                           0.46       185
   macro avg       0.45      0.45      0.44       185
weighted avg       0.46      0.46      0.45       185

2023-09-26 20:34:21 - model - INFO - The Logistic Regression model has been trained, evaluated 0.4594594594594595, and saved.
2023-09-26 20:38:54 - model - INFO - machine learning model Decision Tree Classifier selected
2023-09-26 20:38:54 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:39:04 - model - INFO - machine learning model SVC selected
2023-09-26 20:39:04 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:41:12 - model - INFO - RandomizedSearchCV(cv=5, estimator=DecisionTreeClassifier(),
                   param_distributions={'criterion': ['gini', 'entropy'],
                                        'max_depth': [3, 5, 10],
                                        'min_samples_leaf': [1, 2, 3, 4, 5],
                                        'min_samples_split': [3, 5, 10]},
                   scoring=make_scorer(<lambda>))
2023-09-26 20:41:12 - model - INFO - Model training successful.
2023-09-26 20:41:12 - model - INFO - the custom: parallelize search best params are {'min_samples_split': 5, 'min_samples_leaf': 2, 'max_depth': 5, 'criterion': 'gini'}
2023-09-26 20:41:12 - model - INFO - the custom: parallelize search best score is 0.582
2023-09-26 20:41:12 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=DecisionTreeClassifier(),
                   param_distributions={'criterion': ['gini', 'entropy'],
                                        'max_depth': [3, 5, 10],
                                        'min_samples_leaf': [1, 2, 3, 4, 5],
                                        'min_samples_split': [3, 5, 10]},
                   scoring=make_scorer(<lambda>))
2023-09-26 20:41:12 - model - INFO - Accuracy: 0.42702702702702705
2023-09-26 20:41:12 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 20:41:12 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.47      0.48      0.47        84
           0       0.45      0.31      0.37        42
           1       0.37      0.44      0.40        59

    accuracy                           0.43       185
   macro avg       0.43      0.41      0.41       185
weighted avg       0.43      0.43      0.43       185

2023-09-26 20:41:12 - model - INFO - The Decision Tree Classifier model has been trained, evaluated 0.42702702702702705, and saved.
2023-09-26 20:41:54 - model - INFO - BayesSearchCV(cv=5, estimator=SVC(), scoring=make_scorer(<lambda>),
              search_spaces={'C': [0.1, 1.0, 10.0],
                             'cache_size': array([200, 300, 400]),
                             'degree': [2, 3, 4, 5], 'gamma': ['auto', 'scale'],
                             'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],
                             'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])})
2023-09-26 20:41:54 - model - INFO - Model training successful.
2023-09-26 20:41:54 - model - INFO - the custom: parallelize search best params are OrderedDict([('C', 10.0), ('cache_size', 200), ('degree', 3), ('gamma', 'auto'), ('kernel', 'sigmoid'), ('tol', 0.021544346900318832)])
2023-09-26 20:41:54 - model - INFO - the custom: parallelize search best score is 0.696
2023-09-26 20:41:54 - model - INFO - the custom: parallelize search best estimator is BayesSearchCV(cv=5, estimator=SVC(), scoring=make_scorer(<lambda>),
              search_spaces={'C': [0.1, 1.0, 10.0],
                             'cache_size': array([200, 300, 400]),
                             'degree': [2, 3, 4, 5], 'gamma': ['auto', 'scale'],
                             'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],
                             'tol': array([0.001     , 0.00464159, 0.02154435, 0.1       ])})
2023-09-26 20:41:54 - model - INFO - Accuracy: 0.3783783783783784
2023-09-26 20:41:54 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 20:41:54 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.45      0.29      0.35        69
           0       0.27      0.32      0.29        44
           1       0.40      0.50      0.44        72

    accuracy                           0.38       185
   macro avg       0.38      0.37      0.36       185
weighted avg       0.39      0.38      0.38       185

2023-09-26 20:41:54 - model - INFO - The SVC model has been trained, evaluated 0.3783783783783784, and saved.
2023-09-26 20:54:07 - model - INFO - machine learning model Isolation Forest selected
2023-09-26 20:54:07 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:54:17 - model - INFO - machine learning model Gradient Boosting Classifier selected
2023-09-26 20:54:17 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:54:18 - model - ERROR - Exception occurred during model search: ExponentialLoss requires 2 classes; got 3 class(es)
2023-09-26 20:56:09 - model - INFO - Starting loading the models
2023-09-26 20:56:09 - model - INFO - loading the Main view model
2023-09-26 20:56:09 - model - INFO - loading the Trade tab model
2023-09-26 20:56:09 - model - INFO - loading the Exchange tab model
2023-09-26 20:56:09 - model - INFO - loading the Bot tab model
2023-09-26 20:56:09 - model - INFO - loading the Chart tab model
2023-09-26 20:56:09 - model - INFO - Finished loading the models
2023-09-26 20:56:16 - model - INFO - machine learning model Random Forest Classifier selected
2023-09-26 20:56:16 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:56:23 - model - INFO - machine learning model Isolation Forest selected
2023-09-26 20:56:23 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:56:26 - model - INFO - machine learning model Gradient Boosting Classifier selected
2023-09-26 20:56:26 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:56:30 - model - INFO - machine learning model Extra Tree Classifier selected
2023-09-26 20:56:30 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 20:58:41 - model - INFO - GridSearchCV(cv=5, estimator=ExtraTreeClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': [3, 4, 6, 8, 10],
                         'min_samples_leaf': [1, 2, 3, 4, 5],
                         'min_samples_split': [3, 4, 6, 8, 10]},
             scoring=make_scorer(<lambda>))
2023-09-26 20:58:41 - model - INFO - Model training successful.
2023-09-26 20:58:41 - model - INFO - the custom: parallelize search best params are {'criterion': 'entropy', 'max_depth': 6, 'min_samples_leaf': 4, 'min_samples_split': 4}
2023-09-26 20:58:41 - model - INFO - the custom: parallelize search best score is 0.514
2023-09-26 20:58:41 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=ExtraTreeClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': [3, 4, 6, 8, 10],
                         'min_samples_leaf': [1, 2, 3, 4, 5],
                         'min_samples_split': [3, 4, 6, 8, 10]},
             scoring=make_scorer(<lambda>))
2023-09-26 20:58:41 - model - INFO - Accuracy: 0.42162162162162165
2023-09-26 20:58:41 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 20:58:41 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.49      0.30      0.37        73
           0       0.00      0.00      0.00        44
           1       0.40      0.82      0.54        68

    accuracy                           0.42       185
   macro avg       0.30      0.37      0.30       185
weighted avg       0.34      0.42      0.35       185

2023-09-26 20:58:42 - model - INFO - The Extra Tree Classifier model has been trained, evaluated 0.42162162162162165, and saved.
2023-09-26 21:18:03 - model - INFO - machine learning model XGBoost Classifier selected
2023-09-26 21:18:03 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 21:18:13 - model - INFO - machine learning model Gaussian Naive Bayes selected
2023-09-26 21:18:13 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 21:18:21 - model - INFO - machine learning model Radius Neighbors Classifier selected
2023-09-26 21:18:21 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 21:18:26 - model - ERROR - Exception occurred during model search: No neighbors found for test samples array([ 81, 112], dtype=int64), you can try using larger radius, giving a label for outliers, or considering removing them from your dataset.
2023-09-26 21:19:07 - model - INFO - RandomizedSearchCV(cv=5, estimator=GaussianNB(),
                   param_distributions={'var_smoothing': [1e-09, 1e-08, 1e-07]},
                   scoring=make_scorer(<lambda>))
2023-09-26 21:19:07 - model - INFO - Model training successful.
2023-09-26 21:19:07 - model - INFO - the custom: parallelize search best params are {'var_smoothing': 1e-09}
2023-09-26 21:19:07 - model - INFO - the custom: parallelize search best score is 0.8880000000000001
2023-09-26 21:19:07 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=GaussianNB(),
                   param_distributions={'var_smoothing': [1e-09, 1e-08, 1e-07]},
                   scoring=make_scorer(<lambda>))
2023-09-26 21:19:07 - model - INFO - Accuracy: 0.34594594594594597
2023-09-26 21:19:07 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 21:19:07 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.47      0.14      0.22        64
           0       0.27      0.90      0.42        40
           1       0.56      0.23      0.33        81

    accuracy                           0.35       185
   macro avg       0.44      0.43      0.32       185
weighted avg       0.47      0.35      0.31       185

2023-09-26 21:19:08 - model - INFO - The Gaussian Naive Bayes model has been trained, evaluated 0.34594594594594597, and saved.
2023-09-26 21:19:53 - model - INFO - machine learning model K-Nearest Neighbors selected
2023-09-26 21:19:53 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 21:20:03 - model - INFO - machine learning model AdaBoost Classifier selected
2023-09-26 21:20:03 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 21:22:08 - model - ERROR - Model training failed: All searches failed!
2023-09-26 21:24:43 - model - INFO - GridSearchCV(cv=5, estimator=KNeighborsClassifier(),
             param_grid={'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],
                         'leaf_size': [30, 40, 50],
                         'n_neighbors': [3, 5, 11, 19], 'p': [1, 2],
                         'weights': ['uniform', 'distance']},
             scoring=make_scorer(<lambda>))
2023-09-26 21:24:43 - model - INFO - Model training successful.
2023-09-26 21:24:43 - model - INFO - the custom: parallelize search best params are {'algorithm': 'auto', 'leaf_size': 30, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2023-09-26 21:24:43 - model - INFO - the custom: parallelize search best score is 0.508
2023-09-26 21:24:43 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=KNeighborsClassifier(),
             param_grid={'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],
                         'leaf_size': [30, 40, 50],
                         'n_neighbors': [3, 5, 11, 19], 'p': [1, 2],
                         'weights': ['uniform', 'distance']},
             scoring=make_scorer(<lambda>))
2023-09-26 21:24:44 - model - INFO - Accuracy: 0.4918918918918919
2023-09-26 21:24:44 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 21:24:44 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.55      0.55      0.55        84
           0       0.37      0.38      0.37        40
           1       0.50      0.49      0.50        61

    accuracy                           0.49       185
   macro avg       0.47      0.47      0.47       185
weighted avg       0.49      0.49      0.49       185

2023-09-26 21:24:44 - model - INFO - The K-Nearest Neighbors model has been trained, evaluated 0.4918918918918919, and saved.
2023-09-26 21:26:05 - model - INFO - GridSearchCV(cv=5,
             estimator=XGBClassifier(base_score=None, booster=None,
                                     colsample_bylevel=None,
                                     colsample_bynode=None,
                                     colsample_bytree=None,
                                     enable_categorical=False, gamma=None,
                                     gpu_id=None, importance_type=None,
                                     interaction_constraints=None,
                                     learning_rate=None, max_delta_step=None,
                                     max_depth=None, min_child_weight=None,
                                     missing=nan, monotone_constraints=None,...
                                     num_parallel_tree=None, predictor=None,
                                     random_state=None, reg_alpha=None,
                                     reg_lambda=None, scale_pos_weight=None,
                                     subsample=None, tree_method=None,
                                     validate_parameters=None, verbosity=None),
             param_grid={'eta': [0.1, 0.2, 0.3, 0.4, 0.5],
                         'eval_metric': ['mlogloss'],
                         'max_depth': [3, 4, 6, 8, 10], 'num_class': [3],
                         'objective': ['binary:logistic', 'multi:softmax']},
             scoring=make_scorer(<lambda>))
2023-09-26 21:26:05 - model - INFO - Model training successful.
2023-09-26 21:26:05 - model - INFO - the custom: parallelize search best params are {'eta': 0.3, 'eval_metric': 'mlogloss', 'max_depth': 3, 'num_class': 3, 'objective': 'binary:logistic'}
2023-09-26 21:26:05 - model - INFO - the custom: parallelize search best score is 0.48599999999999993
2023-09-26 21:26:05 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5,
             estimator=XGBClassifier(base_score=None, booster=None,
                                     colsample_bylevel=None,
                                     colsample_bynode=None,
                                     colsample_bytree=None,
                                     enable_categorical=False, gamma=None,
                                     gpu_id=None, importance_type=None,
                                     interaction_constraints=None,
                                     learning_rate=None, max_delta_step=None,
                                     max_depth=None, min_child_weight=None,
                                     missing=nan, monotone_constraints=None,...
                                     num_parallel_tree=None, predictor=None,
                                     random_state=None, reg_alpha=None,
                                     reg_lambda=None, scale_pos_weight=None,
                                     subsample=None, tree_method=None,
                                     validate_parameters=None, verbosity=None),
             param_grid={'eta': [0.1, 0.2, 0.3, 0.4, 0.5],
                         'eval_metric': ['mlogloss'],
                         'max_depth': [3, 4, 6, 8, 10], 'num_class': [3],
                         'objective': ['binary:logistic', 'multi:softmax']},
             scoring=make_scorer(<lambda>))
2023-09-26 21:26:05 - model - INFO - Accuracy: 0.5081081081081081
2023-09-26 21:26:05 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 21:26:05 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.51      0.51      0.51        67
           0       0.33      0.37      0.35        41
           1       0.62      0.58      0.60        77

    accuracy                           0.51       185
   macro avg       0.49      0.49      0.49       185
weighted avg       0.51      0.51      0.51       185

2023-09-26 21:26:05 - model - INFO - The XGBoost Classifier model has been trained, evaluated 0.5081081081081081, and saved.
2023-09-26 21:26:15 - model - INFO - BayesSearchCV(cv=5, estimator=IsolationForest(), scoring=make_scorer(<lambda>),
              search_spaces={'contamination': [0.1, 0.2, 0.3, 0.4, 0.5],
                             'max_samples': ['auto'],
                             'n_estimators': array([100, 200, 300, 400, 500, 600, 700, 800, 900])})
2023-09-26 21:26:15 - model - INFO - Model training successful.
2023-09-26 21:26:15 - model - INFO - the custom: parallelize search best params are OrderedDict([('contamination', 0.1), ('max_samples', 'auto'), ('n_estimators', 200)])
2023-09-26 21:26:15 - model - INFO - the custom: parallelize search best score is 0.676
2023-09-26 21:26:15 - model - INFO - the custom: parallelize search best estimator is BayesSearchCV(cv=5, estimator=IsolationForest(), scoring=make_scorer(<lambda>),
              search_spaces={'contamination': [0.1, 0.2, 0.3, 0.4, 0.5],
                             'max_samples': ['auto'],
                             'n_estimators': array([100, 200, 300, 400, 500, 600, 700, 800, 900])})
2023-09-26 21:27:25 - model - INFO - GridSearchCV(cv=5, estimator=AdaBoostClassifier(),
             param_grid={'algorithm': ['SAMME', 'SAMME.R'],
                         'learning_rate': [0.01, 0.1, 1.0],
                         'n_estimators': array([ 10,  60, 110, 160, 210, 260])},
             scoring=make_scorer(<lambda>))
2023-09-26 21:27:25 - model - INFO - Model training successful.
2023-09-26 21:27:25 - model - INFO - the custom: parallelize search best params are {'algorithm': 'SAMME.R', 'learning_rate': 1.0, 'n_estimators': 10}
2023-09-26 21:27:25 - model - INFO - the custom: parallelize search best score is 0.564
2023-09-26 21:27:25 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=AdaBoostClassifier(),
             param_grid={'algorithm': ['SAMME', 'SAMME.R'],
                         'learning_rate': [0.01, 0.1, 1.0],
                         'n_estimators': array([ 10,  60, 110, 160, 210, 260])},
             scoring=make_scorer(<lambda>))
2023-09-26 21:27:25 - model - INFO - Accuracy: 0.4
2023-09-26 21:27:25 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 21:27:25 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.41      0.32      0.36        74
           0       0.41      0.30      0.35        43
           1       0.39      0.54      0.45        68

    accuracy                           0.40       185
   macro avg       0.40      0.39      0.39       185
weighted avg       0.40      0.40      0.39       185

2023-09-26 21:27:25 - model - INFO - The AdaBoost Classifier model has been trained, evaluated 0.4, and saved.
2023-09-26 22:19:42 - model - INFO - GridSearchCV(cv=5, estimator=RandomForestClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': array([ 10,  60, 110, 160, 210, 260]),
                         'min_samples_leaf': array([1, 2, 3, 4, 5]),
                         'min_samples_split': array([ 2,  4,  6,  8, 10]),
                         'n_estimators': array([ 10,  60, 110, 160, 210, 260])},
             scoring=make_scorer(<lambda>))
2023-09-26 22:19:42 - model - INFO - Model training successful.
2023-09-26 22:19:42 - model - INFO - the custom: parallelize search best params are {'criterion': 'gini', 'max_depth': 260, 'min_samples_leaf': 5, 'min_samples_split': 4, 'n_estimators': 10}
2023-09-26 22:19:42 - model - INFO - the custom: parallelize search best score is 0.48200000000000004
2023-09-26 22:19:42 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=RandomForestClassifier(),
             param_grid={'criterion': ['gini', 'entropy'],
                         'max_depth': array([ 10,  60, 110, 160, 210, 260]),
                         'min_samples_leaf': array([1, 2, 3, 4, 5]),
                         'min_samples_split': array([ 2,  4,  6,  8, 10]),
                         'n_estimators': array([ 10,  60, 110, 160, 210, 260])},
             scoring=make_scorer(<lambda>))
2023-09-26 22:19:43 - model - INFO - Accuracy: 0.5297297297297298
2023-09-26 22:19:43 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 22:19:43 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.49      0.52      0.51        67
           0       0.44      0.40      0.42        42
           1       0.61      0.61      0.61        76

    accuracy                           0.53       185
   macro avg       0.51      0.51      0.51       185
weighted avg       0.53      0.53      0.53       185

2023-09-26 22:19:46 - model - INFO - The Random Forest Classifier model has been trained, evaluated 0.5297297297297298, and saved.
2023-09-26 22:41:37 - model - INFO - machine learning model Gradient Boosting Regressor selected
2023-09-26 22:41:37 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 22:41:39 - model - INFO - machine learning model Gaussian Process Classifier selected
2023-09-26 22:41:39 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 22:41:39 - model - ERROR - Exception occurred during model search: 'str' object has no attribute 'requires_vector_input'
2023-09-26 22:41:39 - model - ERROR - Model training failed: All searches failed!
2023-09-26 22:43:02 - model - INFO - machine learning model Quadratic Discriminant Analysis selected
2023-09-26 22:43:02 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 22:47:21 - model - INFO - Starting loading the models
2023-09-26 22:47:21 - model - INFO - loading the Main view model
2023-09-26 22:47:21 - model - INFO - loading the Trade tab model
2023-09-26 22:47:21 - model - INFO - loading the Exchange tab model
2023-09-26 22:47:21 - model - INFO - loading the Bot tab model
2023-09-26 22:47:21 - model - INFO - loading the Chart tab model
2023-09-26 22:47:21 - model - INFO - Finished loading the models
2023-09-26 22:47:43 - model - INFO - machine learning model Gradient Boosting Regressor selected
2023-09-26 22:47:43 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 22:52:22 - model - INFO - machine learning model Gaussian Process Classifier selected
2023-09-26 22:52:22 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 22:52:22 - model - ERROR - Model training failed: Invalid dimension [1**2 * RBF(length_scale=1), 1**2 * Matern(length_scale=1, nu=1.5)]. Read the documentation for supported types.
2023-09-26 22:54:54 - model - INFO - machine learning model Quadratic Discriminant Analysis selected
2023-09-26 22:54:54 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 22:55:57 - model - INFO - RandomizedSearchCV(cv=5, estimator=QuadraticDiscriminantAnalysis(),
                   param_distributions={'reg_param': [0.0, 0.1, 0.2],
                                        'store_covariance': [True, False],
                                        'tol': [0.0001, 0.001, 0.01]},
                   scoring=make_scorer(<lambda>))
2023-09-26 22:55:57 - model - INFO - Model training successful.
2023-09-26 22:55:57 - model - INFO - the custom: parallelize search best params are {'tol': 0.01, 'store_covariance': True, 'reg_param': 0.0}
2023-09-26 22:55:57 - model - INFO - the custom: parallelize search best score is 0.8859999999999999
2023-09-26 22:55:57 - model - INFO - the custom: parallelize search best estimator is RandomizedSearchCV(cv=5, estimator=QuadraticDiscriminantAnalysis(),
                   param_distributions={'reg_param': [0.0, 0.1, 0.2],
                                        'store_covariance': [True, False],
                                        'tol': [0.0001, 0.001, 0.01]},
                   scoring=make_scorer(<lambda>))
2023-09-26 22:55:57 - model - INFO - Accuracy: 0.32432432432432434
2023-09-26 22:55:57 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 22:55:57 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.54      0.11      0.18        66
           0       0.28      0.96      0.44        45
           1       0.50      0.14      0.21        74

    accuracy                           0.32       185
   macro avg       0.44      0.40      0.28       185
weighted avg       0.46      0.32      0.25       185

2023-09-26 22:55:57 - model - INFO - The Quadratic Discriminant Analysis model has been trained, evaluated 0.32432432432432434, and saved.
2023-09-26 22:58:23 - model - INFO - machine learning model SGD Classifier selected
2023-09-26 22:58:23 - model - INFO - 0     -1
1      1
2     -1
3      1
4      1
      ..
919    0
920    0
921    0
922    0
923    0
Name: label, Length: 924, dtype: int32
2023-09-26 23:00:31 - model - INFO - GridSearchCV(cv=5, estimator=SGDClassifier(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['hinge', 'log', 'modified_huber',
                                  'squared_hinge', 'perceptron'],
                         'penalty': ['l2', 'l1', 'elasticnet']},
             scoring=make_scorer(<lambda>))
2023-09-26 23:00:31 - model - INFO - Model training successful.
2023-09-26 23:00:31 - model - INFO - the custom: parallelize search best params are {'alpha': 0.01, 'eta0': 0.01, 'l1_ratio': 0.15, 'learning_rate': 'adaptive', 'loss': 'perceptron', 'penalty': 'l1'}
2023-09-26 23:00:31 - model - INFO - the custom: parallelize search best score is 0.8300000000000001
2023-09-26 23:00:31 - model - INFO - the custom: parallelize search best estimator is GridSearchCV(cv=5, estimator=SGDClassifier(),
             param_grid={'alpha': [0.0001, 0.001, 0.01],
                         'eta0': [0.01, 0.1, 0.5], 'l1_ratio': [0.15, 0.3, 0.5],
                         'learning_rate': ['constant', 'optimal', 'invscaling',
                                           'adaptive'],
                         'loss': ['hinge', 'log', 'modified_huber',
                                  'squared_hinge', 'perceptron'],
                         'penalty': ['l2', 'l1', 'elasticnet']},
             scoring=make_scorer(<lambda>))
2023-09-26 23:00:31 - model - INFO - Accuracy: 0.44324324324324327
2023-09-26 23:00:31 - model - INFO - AUC-ROC: Not Applicable
2023-09-26 23:00:31 - model - INFO - Classification Report:
              precision    recall  f1-score   support

          -1       0.40      0.67      0.50        60
           0       0.00      0.00      0.00        52
           1       0.50      0.58      0.54        73

    accuracy                           0.44       185
   macro avg       0.30      0.41      0.34       185
weighted avg       0.33      0.44      0.37       185

2023-09-26 23:00:31 - model - INFO - The SGD Classifier model has been trained, evaluated 0.44324324324324327, and saved.
2023-09-26 23:25:45 - model - INFO - Starting loading the models
2023-09-26 23:25:45 - model - INFO - loading the Main view model
2023-09-26 23:25:45 - model - INFO - loading the Trade tab model
2023-09-26 23:25:45 - model - INFO - loading the Exchange tab model
2023-09-26 23:25:45 - model - INFO - loading the Bot tab model
2023-09-26 23:25:45 - model - INFO - loading the Chart tab model
2023-09-26 23:25:45 - model - INFO - Finished loading the models
2023-09-26 23:27:48 - model - INFO - Starting loading the models
2023-09-26 23:27:48 - model - INFO - loading the Main view model
2023-09-26 23:27:48 - model - INFO - loading the Trade tab model
2023-09-26 23:27:48 - model - INFO - loading the Exchange tab model
2023-09-26 23:27:48 - model - INFO - loading the Bot tab model
2023-09-26 23:27:48 - model - INFO - loading the Chart tab model
2023-09-26 23:27:48 - model - INFO - Finished loading the models
2023-09-26 23:28:29 - model - INFO - Creating a auto trading bot Autobot-Phemex: BTC/USDT-30m-BayesianRidge(alpha_1=0.0001, alpha_2=0.0001, lambda_1=1e-05, lambda_2=1e-05,
              n_iter=100, tol=0.01)- Trades: 0 -> 
2023-09-26 23:29:15 - model - INFO - Creating a new thread for index 0
2023-09-26 23:29:15 - model - INFO - Starting a auto trading bot Autobot-Phemex: BTC/USDT-30m-BayesianRidge(alpha_1=0.0001, alpha_2=0.0001, lambda_1=1e-05, lambda_2=1e-05,
              n_iter=100, tol=0.01)- Trades: 0 -> 
2023-09-26 23:42:17 - model - INFO - Starting loading the models
2023-09-26 23:42:17 - model - INFO - loading the Main view model
2023-09-26 23:42:17 - model - INFO - loading the Trade tab model
2023-09-26 23:42:17 - model - INFO - loading the Exchange tab model
2023-09-26 23:42:17 - model - INFO - loading the Bot tab model
2023-09-26 23:42:17 - model - INFO - loading the Chart tab model
2023-09-26 23:42:17 - model - INFO - Finished loading the models
2023-09-26 23:43:20 - model - INFO - Creating a auto trading bot Autobot-Phemex: BTC/USDT-30m-BayesianRidge(alpha_1=1e-05, alpha_2=1e-05, lambda_1=1e-05, n_iter=1000)- Trades: 0 -> 
2023-09-26 23:43:40 - model - INFO - Creating a new thread for index 0
2023-09-26 23:43:40 - model - INFO - Starting a auto trading bot Autobot-Phemex: BTC/USDT-30m-BayesianRidge(alpha_1=1e-05, alpha_2=1e-05, lambda_1=1e-05, n_iter=1000)- Trades: 0 -> 
2023-09-26 23:43:48 - model - ERROR - Error during prediction: [Errno 2] No such file or directory: 'data/scaler.pkl'
2023-09-26 23:50:22 - model - INFO - Starting loading the models
2023-09-26 23:50:22 - model - INFO - loading the Main view model
2023-09-26 23:50:22 - model - INFO - loading the Trade tab model
2023-09-26 23:50:22 - model - INFO - loading the Exchange tab model
2023-09-26 23:50:22 - model - INFO - loading the Bot tab model
2023-09-26 23:50:22 - model - INFO - loading the Chart tab model
2023-09-26 23:50:22 - model - INFO - Finished loading the models
2023-09-26 23:52:28 - model - INFO - Creating a auto trading bot Autobot-Phemex: BTC/USDT-30m-BayesianRidge(alpha_1=1e-05, alpha_2=1e-05, lambda_1=1e-05, n_iter=1000)- Trades: 0 -> 
2023-09-26 23:52:58 - model - INFO - Creating a new thread for index 0
2023-09-26 23:52:58 - model - INFO - Starting a auto trading bot Autobot-Phemex: BTC/USDT-30m-BayesianRidge(alpha_1=1e-05, alpha_2=1e-05, lambda_1=1e-05, n_iter=1000)- Trades: 0 -> 
2023-09-26 23:53:07 - model - ERROR - Error during prediction: [Errno 2] No such file or directory: 'data/scaler.pkl'
